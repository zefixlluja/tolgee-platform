/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  "/v2/user/avatar": {
    put: operations["uploadAvatar"];
    delete: operations["removeAvatar"];
  };
  "/v2/projects/{projectId}": {
    get: operations["get"];
    put: operations["editProject"];
    delete: operations["deleteProject"];
  };
  "/v2/projects/{projectId}/users/{userId}/set-permissions/{permissionType}": {
    put: operations["setUsersPermissions"];
  };
  "/v2/projects/{projectId}/users/{userId}/revoke-access": {
    put: operations["revokePermission"];
  };
  "/v2/projects/{projectId}/machine-translation-service-settings": {
    get: operations["getMachineTranslationSettings"];
    put: operations["setMachineTranslationSettings"];
  };
  "/v2/projects/{projectId}/keys/{keyId}/tags": {
    put: operations["tagKey"];
  };
  "/v2/projects/{projectId}/keys/{id}/complex-update": {
    put: operations["complexEdit"];
  };
  "/v2/projects/{projectId}/keys/{id}": {
    put: operations["edit"];
  };
  "/v2/projects/{projectId}/invite": {
    put: operations["inviteUser"];
  };
  "/v2/projects/{projectId}/import/result/languages/{languageId}/translations/{translationId}/resolve/set-override": {
    put: operations["resolveTranslationSetOverride"];
  };
  "/v2/projects/{projectId}/import/result/languages/{languageId}/translations/{translationId}/resolve/set-keep-existing": {
    put: operations["resolveTranslationSetKeepExisting"];
  };
  "/v2/projects/{projectId}/import/result/languages/{languageId}/resolve-all/set-override": {
    put: operations["resolveTranslationSetOverride_1"];
  };
  "/v2/projects/{projectId}/import/result/languages/{languageId}/resolve-all/set-keep-existing": {
    put: operations["resolveTranslationSetKeepExisting_1"];
  };
  "/v2/projects/{projectId}/import/result/languages/{importLanguageId}/select-existing/{existingLanguageId}": {
    put: operations["selectExistingLanguage"];
  };
  "/v2/projects/{projectId}/import/result/languages/{importLanguageId}/reset-existing": {
    put: operations["resetExistingLanguage"];
  };
  "/v2/projects/{projectId}/import/apply": {
    put: operations["applyImport"];
  };
  "/v2/projects/{projectId}/auto-translation-settings": {
    get: operations["getAutoTranslationSettings"];
    put: operations["setAutoTranslationSettings"];
  };
  "/v2/projects/{projectId}/translations/{translationId}/set-state/{state}": {
    put: operations["setTranslationState"];
  };
  "/v2/projects/{projectId}/translations/{translationId}/comments/{commentId}/set-state/{state}": {
    put: operations["setState"];
  };
  "/v2/projects/{projectId}/translations/{translationId}/comments/{commentId}": {
    get: operations["get_1"];
    put: operations["update"];
    delete: operations["delete_2"];
  };
  "/v2/projects/{projectId}/translations/{translationId}/dismiss-auto-translated-state": {
    put: operations["dismissAutoTranslatedState"];
  };
  "/v2/projects/{projectId}/translations": {
    get: operations["getTranslations"];
    put: operations["setTranslations"];
    post: operations["createOrUpdateTranslations"];
  };
  "/v2/projects/{projectId}/transfer-to-user/{userId}": {
    put: operations["transferProjectToUser"];
  };
  "/v2/projects/{projectId}/transfer-to-organization/{organizationId}": {
    put: operations["transferProjectToOrganization"];
  };
  "/v2/projects/{projectId}/leave": {
    put: operations["leaveProject"];
  };
  "/v2/projects/{projectId}/languages/{languageId}": {
    get: operations["get_3"];
    put: operations["editLanguage"];
    delete: operations["deleteLanguage_1"];
  };
  "/v2/projects/{id}/avatar": {
    put: operations["uploadAvatar_1"];
    delete: operations["removeAvatar_1"];
  };
  "/v2/organizations/{organizationId}/users/{userId}/set-role": {
    put: operations["setUserRole"];
  };
  "/api/organizations/{organizationId}/users/{userId}/set-role": {
    put: operations["setUserRole_1"];
  };
  "/v2/organizations/{id}/leave": {
    put: operations["leaveOrganization"];
  };
  "/api/organizations/{id}/leave": {
    put: operations["leaveOrganization_1"];
  };
  "/v2/organizations/{id}/invite": {
    put: operations["inviteUser_1"];
  };
  "/api/organizations/{id}/invite": {
    put: operations["inviteUser_2"];
  };
  "/v2/organizations/{id}/avatar": {
    put: operations["uploadAvatar_2"];
    delete: operations["removeAvatar_2"];
  };
  "/api/organizations/{id}/avatar": {
    put: operations["uploadAvatar_3"];
    delete: operations["removeAvatar_3"];
  };
  "/v2/organizations/{id}": {
    get: operations["get_7"];
    put: operations["update_2"];
    delete: operations["delete_4"];
  };
  "/api/organizations/{id}": {
    get: operations["get_8"];
    put: operations["update_3"];
    delete: operations["delete_5"];
  };
  "/v2/billing/refresh-subscription/{organizationId}": {
    /** Refreshes organizations subscription by Stripe data */
    put: operations["refresh"];
  };
  "/v2/api-keys/{apiKeyId}": {
    put: operations["update_4"];
    delete: operations["delete_7"];
  };
  "/api/project/{projectId}/keys": {
    put: operations["edit_2"];
    post: operations["create_12"];
    delete: operations["delete_10"];
  };
  "/api/project/{projectId}/translations": {
    put: operations["setTranslations_2"];
    post: operations["createOrUpdateTranslations_2"];
  };
  "/v2/user": {
    get: operations["getInfo"];
    post: operations["updateUser"];
  };
  "/v2/slug/generate-project": {
    post: operations["generateProjectSlug"];
  };
  "/api/address-part/generate-project": {
    post: operations["generateProjectSlug_1"];
  };
  "/v2/slug/generate-organization": {
    post: operations["generateOrganizationSlug"];
  };
  "/api/address-part/generate-organization": {
    post: operations["generateOrganizationSlug_1"];
  };
  "/v2/public/billing/webhook": {
    post: operations["webhook"];
  };
  "/v2/projects": {
    get: operations["getAll"];
    post: operations["createProject"];
  };
  "/v2/projects/{projectId}/keys/create": {
    post: operations["create"];
  };
  "/v2/projects/{projectId}/keys": {
    post: operations["create_1"];
  };
  "/v2/projects/{projectId}/import": {
    post: operations["addFiles"];
    delete: operations["cancelImport"];
  };
  "/v2/projects/{projectId}/import/with-streaming-response": {
    post: operations["addFilesStreaming"];
  };
  "/v2/projects/{projectId}/translations/{translationId}/comments": {
    get: operations["getAll_3"];
    post: operations["create_4"];
  };
  "/v2/projects/{projectId}/translations/create-comment": {
    post: operations["create_6"];
  };
  "/v2/projects/{projectId}/suggest/translation-memory": {
    post: operations["suggestTranslationMemory"];
  };
  "/v2/projects/{projectId}/suggest/machine-translations": {
    post: operations["suggestMachineTranslations"];
  };
  "/v2/projects/{projectId}/languages": {
    get: operations["getAll_5"];
    post: operations["createLanguage"];
  };
  "/v2/projects/{projectId}/export": {
    get: operations["export"];
    post: operations["exportPost"];
  };
  "/v2/projects/{projectId}/keys/{keyId}/screenshots": {
    get: operations["getKeyScreenshots_3"];
    post: operations["uploadScreenshot_1"];
  };
  "/v2/organizations": {
    get: operations["getAll_7"];
    post: operations["create_8"];
  };
  "/api/organizations": {
    get: operations["getAll_8"];
    post: operations["create_9"];
  };
  "/v2/image-upload": {
    post: operations["upload"];
  };
  "/v2/billing/update-subscription": {
    /** Updates subscription session */
    post: operations["updateSubscription"];
  };
  "/v2/billing/subscribe": {
    /** Returns url of Stripe checkout session */
    post: operations["subscribe"];
  };
  "/v2/billing/create-customer-portal-session": {
    /** Returns url of Stripe checkout session */
    post: operations["createCustomerPortalSession"];
  };
  "/v2/billing/cancel-subscription/{organizationId}": {
    /** Cancels subscription */
    post: operations["cancelSubscription"];
  };
  "/v2/api-keys": {
    get: operations["allByUser"];
    post: operations["create_10"];
  };
  "/api/user": {
    get: operations["getInfo_1"];
    post: operations["updateUser_1"];
  };
  "/api/public/validate_email": {
    post: operations["validateEmail"];
  };
  "/api/public/sign_up": {
    post: operations["signUp"];
  };
  "/api/public/reset_password_set": {
    post: operations["resetPasswordSet"];
  };
  "/api/public/reset_password_request": {
    post: operations["resetPasswordRequest"];
  };
  "/api/public/generatetoken": {
    post: operations["authenticateUser"];
  };
  "/api/project/{projectId}/keys/translations/{languages}": {
    /** Key name must be provided in method body, since it can be long and can contain characters hard to encode */
    post: operations["getKeyTranslationsPost"];
  };
  "/api/project/{projectId}/keys/edit": {
    post: operations["editDeprecated"];
  };
  "/api/project/{projectId}/keys/create": {
    post: operations["create_11"];
  };
  "/api/project/{projectId}/screenshots/get": {
    post: operations["getKeyScreenshots_1"];
  };
  "/api/project/{projectId}/screenshots": {
    post: operations["uploadScreenshot_3"];
  };
  "/api/apiKeys": {
    get: operations["allByUser_1"];
    post: operations["create_15"];
  };
  "/api/apiKeys/edit": {
    post: operations["edit_4"];
  };
  "/v2/slug/validate-project/{slug}": {
    get: operations["validateProjectSlug"];
  };
  "/api/address-part/validate-project/{slug}": {
    get: operations["validateProjectSlug_1"];
  };
  "/v2/slug/validate-organization/{slug}": {
    get: operations["validateOrganizationSlug"];
  };
  "/api/address-part/validate-organization/{slug}": {
    get: operations["validateOrganizationSlug_1"];
  };
  "/v2/projects/{projectId}/users": {
    get: operations["getAllUsers"];
  };
  "/v2/projects/{projectId}/tags": {
    get: operations["getAll_1"];
  };
  "/v2/projects/{projectId}/machine-translation-credit-balance": {
    get: operations["getProjectCredits"];
  };
  "/v2/projects/{projectId}/import/result": {
    get: operations["getImportResult"];
  };
  "/v2/projects/{projectId}/import/result/languages/{languageId}": {
    get: operations["getImportLanguage"];
    delete: operations["deleteLanguage"];
  };
  "/v2/projects/{projectId}/import/result/languages/{languageId}/translations": {
    get: operations["getImportTranslations"];
  };
  "/v2/projects/{projectId}/import/result/files/{importFileId}/issues": {
    get: operations["getImportFileIssues"];
  };
  "/v2/projects/{projectId}/translations/{translationId}/history": {
    get: operations["getTranslationHistory"];
  };
  "/v2/projects/{projectId}/translations/{languages}": {
    get: operations["getAllTranslations"];
  };
  "/v2/projects/{projectId}/translations/select-all": {
    get: operations["getSelectAllKeyIds"];
  };
  "/v2/projects/{projectId}/transfer-options": {
    get: operations["getTransferOptions"];
  };
  "/v2/projects/{projectId}/invitations": {
    get: operations["getProjectInvitations"];
  };
  "/v2/projects/{projectId}/api-keys": {
    get: operations["allByProject"];
  };
  "/v2/projects/with-stats": {
    get: operations["getAllWithStatistics"];
  };
  "/v2/organizations/{slug}/projects": {
    get: operations["getAllProjects"];
  };
  "/api/organizations/{slug}/projects": {
    get: operations["getAllProjects_1"];
  };
  "/v2/organizations/{slug}": {
    get: operations["get_5"];
  };
  "/api/organizations/{slug}": {
    get: operations["get_6"];
  };
  "/v2/organizations/{organizationId}/machine-translation-credit-balance": {
    get: operations["getOrganizationCredits"];
  };
  "/v2/organizations/{organizationId}/invitations": {
    get: operations["getInvitations"];
  };
  "/api/organizations/{organizationId}/invitations": {
    get: operations["getInvitations_1"];
  };
  "/v2/organizations/{id}/users": {
    get: operations["getAllUsers_1"];
  };
  "/api/organizations/{id}/users": {
    get: operations["getAllUsers_2"];
  };
  "/v2/organizations/{id}/projects": {
    get: operations["getAllProjects_2"];
  };
  "/api/organizations/{id}/projects": {
    get: operations["getAllProjects_3"];
  };
  "/v2/machine-translation-credit-balance": {
    get: operations["getUserCredits"];
  };
  "/v2/invitations/{code}/accept": {
    get: operations["acceptInvitation"];
  };
  "/v2/billing/subscriptions": {
    get: operations["getSubscriptions"];
  };
  "/v2/billing/plans": {
    get: operations["getPlans"];
  };
  "/v2/billing/create-change-payment-method-session/{organizationId}": {
    /** Creates change payment method session */
    get: operations["createChangePaymentMethodSession"];
  };
  "/v2/billing/active-plan/{organizationId}": {
    /** Refreshes organizations subscription by Stripe data */
    get: operations["getActivePlan"];
  };
  "/v2/api-keys/{keyId}": {
    get: operations["get_9"];
  };
  "/v2/api-keys/current": {
    get: operations["getCurrent"];
  };
  "/v2/api-keys/availableScopes": {
    get: operations["getScopes"];
  };
  "/api/public/verify_email/{userId}/{code}": {
    get: operations["verifyEmail"];
  };
  "/api/public/reset_password_validate/{email}/{code}": {
    get: operations["resetPasswordValidate"];
  };
  "/api/public/configuration": {
    get: operations["getPublicConfiguration"];
  };
  "/api/public/authorize_oauth/{serviceType}/{code}": {
    get: operations["authenticateUser_1"];
  };
  "/api/project/{projectId}/keys/{id}": {
    get: operations["getDeprecated"];
    delete: operations["delete_8"];
  };
  "/api/project/{projectId}/export/jsonZip": {
    get: operations["doExportJsonZip"];
  };
  "/api/repository/{projectId}/export/jsonZip": {
    get: operations["doExportJsonZip_2"];
  };
  "/api/project/{projectId}/translations/{languages}": {
    get: operations["getTranslations_2"];
  };
  "/api/project/{projectId}/translations/view": {
    get: operations["getViewData"];
  };
  "/api/invitation/list/{projectId}": {
    get: operations["getProjectInvitations_1"];
  };
  "/api/invitation/accept/{code}": {
    get: operations["acceptInvitation_1"];
  };
  "/api/apiKeys/scopes": {
    get: operations["getApiKeyScopes"];
  };
  "/api/apiKeys/project/{projectId}": {
    get: operations["allByProject_1"];
  };
  "/api/apiKeys/availableScopes": {
    get: operations["getScopes_1"];
  };
  "/v2/projects/{projectId}/keys/{keyId}/tags/{tagId}": {
    delete: operations["removeTag"];
  };
  "/v2/projects/{projectId}/keys/{ids}": {
    delete: operations["delete"];
  };
  "/v2/projects/{projectId}/keys/{keyId}/screenshots/{ids}": {
    delete: operations["deleteScreenshots_1"];
  };
  "/v2/organizations/{organizationId}/users/{userId}": {
    delete: operations["removeUser"];
  };
  "/api/organizations/{organizationId}/users/{userId}": {
    delete: operations["removeUser_1"];
  };
  "/v2/invitations/{invitationId}": {
    delete: operations["deleteInvitation"];
  };
  "/v2/image-upload/{ids}": {
    delete: operations["delete_6"];
  };
  "/api/project/{projectId}/screenshots/{ids}": {
    delete: operations["deleteScreenshots_3"];
  };
  "/api/invitation/{invitationId}": {
    delete: operations["deleteInvitation_1"];
  };
  "/api/apiKeys/{key}": {
    delete: operations["delete_12"];
  };
}

export interface components {
  schemas: {
    Avatar: {
      large: string;
      thumbnail: string;
    };
    UserAccountModel: {
      id: number;
      username: string;
      name?: string;
      emailAwaitingVerification?: string;
      avatar?: components["schemas"]["Avatar"];
    };
    EditProjectDTO: {
      name: string;
      slug?: string;
      baseLanguageId?: number;
    };
    LanguageModel: {
      id: number;
      /** Language name in english */
      name: string;
      /** Language tag according to BCP 47 definition */
      tag: string;
      /** Language name in this language */
      originalName?: string;
      /** Language flag emoji as UTF-8 emoji */
      flagEmoji?: string;
      /** Whether is base language of project */
      base: boolean;
    };
    ProjectModel: {
      id: number;
      name: string;
      description?: string;
      slug?: string;
      avatar?: components["schemas"]["Avatar"];
      userOwner?: components["schemas"]["UserAccountModel"];
      baseLanguage?: components["schemas"]["LanguageModel"];
      organizationOwnerName?: string;
      organizationOwnerSlug?: string;
      organizationOwnerBasePermissions?:
        | "VIEW"
        | "TRANSLATE"
        | "EDIT"
        | "MANAGE";
      organizationRole?: "MEMBER" | "OWNER";
      /** Current user's direct permission */
      directPermissions?: "VIEW" | "TRANSLATE" | "EDIT" | "MANAGE";
      computedPermissions: components["schemas"]["UserPermissionModel"];
    };
    UserPermissionModel: {
      /** List of languages current user has TRANSLATE permission to. If null, all languages edition is permitted. */
      permittedLanguageIds?: number[];
      /** The type of permission. */
      type: "VIEW" | "TRANSLATE" | "EDIT" | "MANAGE";
    };
    MachineTranslationLanguagePropsDto: {
      /** The language to apply those rules. If null, then this settings are default. */
      targetLanguageId?: number;
      /** This service will be used for automated translation */
      primaryService?: "GOOGLE" | "AWS";
      /** List of enabled services */
      enabledServices: ("GOOGLE" | "AWS")[];
    };
    SetMachineTranslationSettingsDto: {
      settings: components["schemas"]["MachineTranslationLanguagePropsDto"][];
    };
    CollectionModelLanguageConfigItemModel: {
      _embedded?: {
        languageConfigs?: components["schemas"]["LanguageConfigItemModel"][];
      };
    };
    LanguageConfigItemModel: {
      /** When null, its a default configuration applied to not configured languages */
      targetLanguageId?: number;
      /** When null, its a default configuration applied to not configured languages */
      targetLanguageTag?: string;
      /** When null, its a default configuration applied to not configured languages */
      targetLanguageName?: string;
      /** Service used for automated translating */
      primaryService?: "GOOGLE" | "AWS";
      /** Services to be used for suggesting */
      enabledServices: ("GOOGLE" | "AWS")[];
    };
    TagKeyDto: {
      name: string;
    };
    TagModel: {
      id: number;
      name: string;
    };
    ComplexEditKeyDto: {
      /** Name of the key */
      name: string;
      /** Translations to update */
      translations?: { [key: string]: string };
      /** Tags of the key. If not provided tags won't be modified */
      tags?: string[];
      /** IDs of screenshots to delete */
      screenshotIdsToDelete?: number[];
      /** Ids of screenshots uploaded with /v2/image-upload endpoint */
      screenshotUploadedImageIds?: number[];
    };
    KeyWithDataModel: {
      /** Id of key record */
      id: number;
      /** Name of key */
      name: string;
      /** Translations object containing values updated in this request */
      translations: {
        [key: string]: components["schemas"]["TranslationModel"];
      };
      /** Tags of key */
      tags: components["schemas"]["TagModel"][];
      /** Screenshots of the key */
      screenshots: components["schemas"]["ScreenshotModel"][];
    };
    /** Screenshots of the key */
    ScreenshotModel: {
      id: number;
      /**
       * File name, which may be downloaded from the screenshot path.
       *
       * When images are secured. Encrypted timestamp is appended to the filename.
       */
      filename: string;
      fileUrl: string;
      createdAt?: string;
    };
    /** Translations object containing values updated in this request */
    TranslationModel: {
      /** Id of translation record */
      id: number;
      /** Translation text */
      text?: string;
      /** State of translation */
      state: "UNTRANSLATED" | "TRANSLATED" | "REVIEWED";
      /** Was translated using Translation Memory or Machine translation service? */
      auto: boolean;
      /** Which machine translation service was used to auto translate this */
      mtProvider?: "GOOGLE" | "AWS";
    };
    EditKeyDto: {
      name: string;
    };
    KeyModel: {
      /** Id of key record */
      id: number;
      /** Name of key */
      name: string;
    };
    ProjectInviteUserDto: {
      type: "VIEW" | "TRANSLATE" | "EDIT" | "MANAGE";
      /**
       * IDs of languages to allow user to translate to with TRANSLATE permission.
       *
       * Only applicable when type is TRANSLATE, otherwise 400 - Bad Request is returned.
       */
      languages?: number[];
      /** Email to send invitation to */
      email?: string;
      /** Name of invited user */
      name?: string;
    };
    ProjectInvitationModel: {
      id: number;
      code: string;
      type: "VIEW" | "TRANSLATE" | "EDIT" | "MANAGE";
      permittedLanguageIds?: number[];
      createdAt: string;
      invitedUserName?: string;
      invitedUserEmail?: string;
    };
    AutoTranslationSettingsDto: {
      /** If true, new keys will be automatically translated using translation memory when 100% match is found */
      usingTranslationMemory: boolean;
      /** If true, new keys will be automatically translated using primary machine translation service.When "usingTranslationMemory" is enabled, it tries to translate it with translation memory first. */
      usingMachineTranslation: boolean;
    };
    TranslationCommentModel: {
      /** Id of translation comment record */
      id: number;
      /** Text of comment */
      text: string;
      /** State of translation */
      state: "RESOLUTION_NOT_NEEDED" | "NEEDS_RESOLUTION" | "RESOLVED";
      author: components["schemas"]["UserAccountModel"];
      /** Date when it was created */
      createdAt: string;
      /** Date when it was updated */
      updatedAt: string;
    };
    TranslationCommentDto: {
      text: string;
      state: "RESOLUTION_NOT_NEEDED" | "NEEDS_RESOLUTION" | "RESOLVED";
    };
    SetTranslationsWithKeyDto: {
      /** Key name to set translations for */
      key: string;
      /** Object mapping language tag to translation */
      translations: { [key: string]: string };
      /**
       * List of languages to return translations for.
       *
       * If not provided, only modified translation will be provided.
       */
      languagesToReturn?: string[];
    };
    SetTranslationsResponseModel: {
      /** Id of key record */
      keyId: number;
      /** Name of key */
      keyName: string;
      /** Translations object containing values updated in this request */
      translations: {
        [key: string]: components["schemas"]["TranslationModel"];
      };
    };
    LanguageDto: {
      /** Language name in english */
      name: string;
      /** Language tag according to BCP 47 definition */
      originalName: string;
      /** Language name in this language */
      tag: string;
      /** Language flag emoji as UTF-8 emoji */
      flagEmoji?: string;
    };
    SetOrganizationRoleDto: {
      roleType: "MEMBER" | "OWNER";
    };
    OrganizationInviteUserDto: {
      roleType: "MEMBER" | "OWNER";
      /** Name of invited user */
      name?: string;
      /** Email to send invitation to */
      email?: string;
    };
    OrganizationInvitationModel: {
      id: number;
      code: string;
      type: "MEMBER" | "OWNER";
      createdAt: string;
      invitedUserName?: string;
      invitedUserEmail?: string;
    };
    OrganizationModel: {
      id: number;
      name: string;
      slug: string;
      description?: string;
      basePermissions: "VIEW" | "TRANSLATE" | "EDIT" | "MANAGE";
      currentUserRole: "MEMBER" | "OWNER";
      avatar?: components["schemas"]["Avatar"];
    };
    OrganizationDto: {
      name: string;
      description?: string;
      slug?: string;
      basePermissions: "VIEW" | "TRANSLATE" | "EDIT" | "MANAGE";
    };
    ActivePlanModel: {
      id: number;
      name: string;
      translationLimit?: number;
      includedMtCredits?: number;
      monthlyPrice?: number;
      yearlyPrice?: number;
      currentPeriodEnd: number;
      cancelAtPeriodEnd: boolean;
    };
    V2EditApiKeyDto: {
      scopes: string[];
    };
    ApiKeyModel: {
      /** ID of the API key */
      id: number;
      /** Resulting user's api key */
      key: string;
      /** Username of user owner */
      username?: string;
      /** Full name of user owner */
      userFullName?: string;
      /** Api key's project ID */
      projectId: number;
      /** Api key's project name */
      projectName: string;
      /** Api key's permission scopes */
      scopes: string[];
    };
    OldEditKeyDto: {
      currentName: string;
      newName: string;
    };
    UserUpdateRequestDto: {
      name: string;
      email: string;
      password?: string;
      /** Callback url for link sent in e-mail. This may be omitted, when server has set frontEndUrl in properties. */
      callbackUrl?: string;
    };
    GenerateSlugDto: {
      name: string;
      oldSlug?: string;
    };
    CreateProjectDTO: {
      name: string;
      languages: components["schemas"]["LanguageDto"][];
      /** Slug of your project used in url e.g. "/v2/projects/what-a-project". If not provided, it will be generated */
      slug?: string;
      /** If not provided, project will be created in user scope */
      organizationId?: number;
      /** Tag of one of created languages, to select it as base language. If not provided, first language will be selected as base. */
      baseLanguageTag?: string;
    };
    CreateKeyDto: {
      /** Name of the key */
      name: string;
      translations?: { [key: string]: string };
      tags?: string[];
      /** Ids of screenshots uploaded with /v2/image-upload endpoint */
      screenshotUploadedImageIds?: number[];
    };
    ErrorResponseBody: {
      code: string;
      params?: { [key: string]: unknown }[];
    };
    ImportAddFilesResultModel: {
      errors: components["schemas"]["ErrorResponseBody"][];
      result?: components["schemas"]["PagedModelImportLanguageModel"];
    };
    ImportLanguageModel: {
      id: number;
      name: string;
      existingLanguageId?: number;
      existingLanguageTag?: string;
      existingLanguageAbbreviation?: string;
      existingLanguageName?: string;
      importFileName: string;
      importFileId: number;
      importFileIssueCount: number;
      totalCount: number;
      conflictCount: number;
      resolvedCount: number;
    };
    PageMetadata: {
      size?: number;
      totalElements?: number;
      totalPages?: number;
      number?: number;
    };
    PagedModelImportLanguageModel: {
      _embedded?: {
        languages?: components["schemas"]["ImportLanguageModel"][];
      };
      page?: components["schemas"]["PageMetadata"];
    };
    StreamingResponseBody: { [key: string]: unknown };
    TranslationCommentWithLangKeyDto: {
      keyId: number;
      languageId: number;
      text: string;
      state: "RESOLUTION_NOT_NEEDED" | "NEEDS_RESOLUTION" | "RESOLVED";
    };
    TranslationWithCommentModel: {
      translation: components["schemas"]["TranslationModel"];
      comment: components["schemas"]["TranslationCommentModel"];
    };
    SuggestRequestDto: {
      /** Key Id to get results for. Use when key is stored already. */
      keyId: number;
      targetLanguageId: number;
      /** Text value of base translation. Useful, when base translation is not stored yet. */
      baseText?: string;
    };
    PagedModelTranslationMemoryItemModel: {
      _embedded?: {
        translationMemoryItems?: components["schemas"]["TranslationMemoryItemModel"][];
      };
      page?: components["schemas"]["PageMetadata"];
    };
    TranslationMemoryItemModel: {
      targetText: string;
      baseText: string;
      keyName: string;
      similarity: number;
    };
    SuggestResultModel: {
      /** Results provided by enabled services */
      machineTranslations?: { [key: string]: string };
      translationCreditsBalanceBefore: number;
      translationCreditsBalanceAfter: number;
    };
    ExportParams: {
      languages?: string[];
      format: "JSON" | "XLIFF";
      splitByScope: boolean;
      splitByScopeDelimiter: string;
      splitByScopeDepth: number;
      filterKeyId?: number[];
      filterKeyIdNot?: number[];
      filterTag?: string;
      filterKeyPrefix?: string;
      filterState?: ("UNTRANSLATED" | "TRANSLATED" | "REVIEWED")[];
      zip: boolean;
    };
    UploadedImageModel: {
      id: number;
      filename: string;
      fileUrl: string;
      requestFilename: string;
      createdAt: string;
    };
    UpdateSubscriptionRequest: {
      /** Id of the organization */
      organizationId: number;
      /** Id of the subscription plan */
      planId: number;
    };
    SubscribeRequest: {
      /** Id of the organization */
      organizationId: number;
      /** Id of the subscription plan */
      planId: number;
    };
    CreateCustomerPortalSessionRequest: {
      /** Id of the organization */
      organizationId?: number;
      /** Url to return afterwards */
      returnUrl: string;
    };
    CreateApiKeyDto: {
      projectId: number;
      scopes: string[];
    };
    TextNode: { [key: string]: unknown };
    SignUpDto: {
      name: string;
      email: string;
      password: string;
      invitationCode?: string;
      callbackUrl?: string;
      recaptchaToken?: string;
    };
    JwtAuthenticationResponse: {
      accessToken?: string;
      tokenType?: string;
    };
    ResetPassword: {
      email: string;
      code: string;
      password?: string;
    };
    ResetPasswordRequest: {
      callbackUrl: string;
      email?: string;
    };
    LoginRequest: {
      username?: string;
      password?: string;
    };
    GetKeyTranslationsReqDto: {
      key?: string;
    };
    DeprecatedEditKeyDTO: {
      oldFullPathString: string;
      newFullPathString: string;
    };
    GetScreenshotsByKeyDto: {
      key: string;
    };
    ScreenshotDTO: {
      id: number;
      filename: string;
      createdAt: string;
    };
    ApiKeyDTO: {
      id: number;
      /** Resulting user's api key */
      key: string;
      userName?: string;
      projectId: number;
      projectName: string;
      scopes: string[];
    };
    EditApiKeyDTO: {
      id: number;
      scopes: string[];
    };
    PagedModelProjectModel: {
      _embedded?: {
        projects?: components["schemas"]["ProjectModel"][];
      };
      page?: components["schemas"]["PageMetadata"];
    };
    PagedModelUserAccountInProjectModel: {
      _embedded?: {
        users?: components["schemas"]["UserAccountInProjectModel"][];
      };
      page?: components["schemas"]["PageMetadata"];
    };
    UserAccountInProjectModel: {
      id: number;
      username: string;
      name?: string;
      organizationRole?: "MEMBER" | "OWNER";
      organizationBasePermissions?: "VIEW" | "TRANSLATE" | "EDIT" | "MANAGE";
      directPermissions?: "VIEW" | "TRANSLATE" | "EDIT" | "MANAGE";
      computedPermissions: components["schemas"]["UserPermissionModel"];
    };
    PagedModelTagModel: {
      _embedded?: {
        tags?: components["schemas"]["TagModel"][];
      };
      page?: components["schemas"]["PageMetadata"];
    };
    CreditBalanceModel: {
      creditBalance: number;
      bucketSize: number;
    };
    ImportTranslationModel: {
      id: number;
      text?: string;
      keyName: string;
      keyId: number;
      conflictId?: number;
      conflictText?: string;
      override: boolean;
      resolved: boolean;
    };
    PagedModelImportTranslationModel: {
      _embedded?: {
        translations?: components["schemas"]["ImportTranslationModel"][];
      };
      page?: components["schemas"]["PageMetadata"];
    };
    EntityModelImportFileIssueView: {
      params: components["schemas"]["ImportFileIssueParamView"][];
      id: number;
      type:
        | "KEY_IS_NOT_STRING"
        | "MULTIPLE_VALUES_FOR_KEY_AND_LANGUAGE"
        | "VALUE_IS_NOT_STRING"
        | "KEY_IS_EMPTY"
        | "VALUE_IS_EMPTY"
        | "PO_MSGCTXT_NOT_SUPPORTED"
        | "ID_ATTRIBUTE_NOT_PROVIDED"
        | "TARGET_NOT_PROVIDED"
        | "TRANSLATION_TOO_LONG";
    };
    ImportFileIssueParamView: {
      value?: string;
      type:
        | "KEY_NAME"
        | "KEY_ID"
        | "LANGUAGE_ID"
        | "KEY_INDEX"
        | "VALUE"
        | "LINE"
        | "FILE_NODE_ORIGINAL";
    };
    PagedModelEntityModelImportFileIssueView: {
      _embedded?: {
        importFileIssueViews?: components["schemas"]["EntityModelImportFileIssueView"][];
      };
      page?: components["schemas"]["PageMetadata"];
    };
    PagedModelTranslationCommentModel: {
      _embedded?: {
        translationComments?: components["schemas"]["TranslationCommentModel"][];
      };
      page?: components["schemas"]["PageMetadata"];
    };
    PagedModelTranslationHistoryModel: {
      _embedded?: {
        revisions?: components["schemas"]["TranslationHistoryModel"][];
      };
      page?: components["schemas"]["PageMetadata"];
    };
    /** Author of the change */
    SimpleUserAccountModel: {
      id: number;
      username: string;
      name?: string;
      avatar?: components["schemas"]["Avatar"];
    };
    TranslationHistoryModel: {
      /** Translation text */
      text?: string;
      /** State of translation */
      state?: "UNTRANSLATED" | "TRANSLATED" | "REVIEWED";
      /** Was translated using Translation Memory or Machine translation service? */
      auto?: boolean;
      /** Which machine translation service was used to auto translate this */
      mtProvider?: "GOOGLE" | "AWS";
      /** Unix timestamp of the revision */
      timestamp: number;
      author?: components["schemas"]["SimpleUserAccountModel"];
      revisionType: "ADD" | "MOD" | "DEL";
    };
    SelectAllResponse: {
      ids: number[];
    };
    KeyWithTranslationsModel: {
      /** Id of key record */
      keyId: number;
      /** Name of key */
      keyName: string;
      /** Tags of key */
      keyTags: components["schemas"]["TagModel"][];
      /** Count of screenshots provided for the key */
      screenshotCount: number;
      /** Key screenshots. Not provided when API key hasn't screenshots.view scope permission. */
      screenshots?: components["schemas"]["ScreenshotModel"][];
      /** Translations object */
      translations: {
        [key: string]: components["schemas"]["TranslationViewModel"];
      };
    };
    KeysWithTranslationsPageModel: {
      _embedded?: {
        keys?: components["schemas"]["KeyWithTranslationsModel"][];
      };
      page?: components["schemas"]["PageMetadata"];
      /** Provided languages data */
      selectedLanguages: components["schemas"]["LanguageModel"][];
      /** Cursor to get next data */
      nextCursor?: string;
    };
    /** Translations object */
    TranslationViewModel: {
      /** Id of translation record */
      id: number;
      /** Translation text */
      text?: string;
      /** State of translation */
      state: "UNTRANSLATED" | "TRANSLATED" | "REVIEWED";
      /** Was translated using Translation Memory or Machine translation service? */
      auto: boolean;
      /** Which machine translation service was used to auto translate this */
      mtProvider?: "GOOGLE" | "AWS";
      /** Count of translation comments */
      commentCount: number;
      /** Count of unresolved translation comments */
      unresolvedCommentCount: number;
      /** Was translation memory used to translate this? */
      fromTranslationMemory: boolean;
    };
    CollectionModelProjectTransferOptionModel: {
      _embedded?: {
        transferOptions?: components["schemas"]["ProjectTransferOptionModel"][];
      };
    };
    ProjectTransferOptionModel: {
      name?: string;
      username?: string;
      id: number;
      type: "USER" | "ORGANIZATION";
    };
    PagedModelLanguageModel: {
      _embedded?: {
        languages?: components["schemas"]["LanguageModel"][];
      };
      page?: components["schemas"]["PageMetadata"];
    };
    CollectionModelProjectInvitationModel: {
      _embedded?: {
        invitations?: components["schemas"]["ProjectInvitationModel"][];
      };
    };
    Pageable: {
      page?: number;
      size?: number;
      sort?: string[];
    };
    PagedModelApiKeyModel: {
      _embedded?: {
        apiKeys?: components["schemas"]["ApiKeyModel"][];
      };
      page?: components["schemas"]["PageMetadata"];
    };
    PagedModelProjectWithStatsModel: {
      _embedded?: {
        projects?: components["schemas"]["ProjectWithStatsModel"][];
      };
      page?: components["schemas"]["PageMetadata"];
    };
    ProjectStatistics: {
      projectId: number;
      keyCount: number;
      languageCount: number;
      translationStateCounts: { [key: string]: number };
    };
    ProjectWithStatsModel: {
      id: number;
      name: string;
      description?: string;
      slug?: string;
      avatar?: components["schemas"]["Avatar"];
      userOwner?: components["schemas"]["UserAccountModel"];
      baseLanguage?: components["schemas"]["LanguageModel"];
      organizationOwnerName?: string;
      organizationOwnerSlug?: string;
      organizationOwnerBasePermissions?:
        | "VIEW"
        | "TRANSLATE"
        | "EDIT"
        | "MANAGE";
      organizationRole?: "MEMBER" | "OWNER";
      /** Current user's direct permission */
      directPermissions?: "VIEW" | "TRANSLATE" | "EDIT" | "MANAGE";
      computedPermissions: components["schemas"]["UserPermissionModel"];
      stats: components["schemas"]["ProjectStatistics"];
      languages: components["schemas"]["LanguageModel"][];
    };
    CollectionModelScreenshotModel: {
      _embedded?: {
        screenshots?: components["schemas"]["ScreenshotModel"][];
      };
    };
    CollectionModelOrganizationInvitationModel: {
      _embedded?: {
        organizationInvitations?: components["schemas"]["OrganizationInvitationModel"][];
      };
    };
    PagedModelUserAccountWithOrganizationRoleModel: {
      _embedded?: {
        usersInOrganization?: components["schemas"]["UserAccountWithOrganizationRoleModel"][];
      };
      page?: components["schemas"]["PageMetadata"];
    };
    UserAccountWithOrganizationRoleModel: {
      id: number;
      name: string;
      username: string;
      organizationRole: "MEMBER" | "OWNER";
    };
    OrganizationRequestParamsDto: {
      filterCurrentUserOwner: boolean;
    };
    PagedModelOrganizationModel: {
      _embedded?: {
        organizations?: components["schemas"]["OrganizationModel"][];
      };
      page?: components["schemas"]["PageMetadata"];
    };
    CollectionModelPlanModel: {
      _embedded?: {
        plans?: components["schemas"]["PlanModel"][];
      };
    };
    PlanModel: {
      id: number;
      name: string;
      translationLimit?: number;
      includedMtCredits?: number;
      monthlyPrice?: number;
      yearlyPrice?: number;
    };
    ApiKeyWithLanguagesModel: {
      id: number;
      key: string;
      username?: string;
      userFullName?: string;
      projectId: number;
      projectName: string;
      scopes: string[];
      /**
       * Languages for which user has translate permission.
       *
       * If null, all languages are permitted.
       */
      permittedLanguageIds?: number[];
    };
    UserResponseDTO: {
      id?: number;
      name?: string;
      username?: string;
      emailAwaitingVerification?: string;
    };
    AuthMethodsDTO: {
      github: components["schemas"]["GithubPublicConfigDTO"];
    };
    GithubPublicConfigDTO: {
      clientId?: string;
      enabled: boolean;
    };
    MtServiceDTO: {
      enabled: boolean;
      defaultEnabledForProject: boolean;
    };
    MtServicesDTO: {
      defaultPrimaryService?: "GOOGLE" | "AWS";
      services: { [key: string]: components["schemas"]["MtServiceDTO"] };
    };
    PublicConfigurationDTO: {
      machineTranslationServices: components["schemas"]["MtServicesDTO"];
      authentication: boolean;
      authMethods?: components["schemas"]["AuthMethodsDTO"];
      passwordResettable: boolean;
      allowRegistrations: boolean;
      screenshotsUrl: string;
      maxUploadFileSize: number;
      clientSentryDsn?: string;
      needsEmailVerification: boolean;
      userCanCreateProjects: boolean;
      userCanCreateOrganizations: boolean;
      socket: components["schemas"]["SocketIo"];
      appName: string;
      version: string;
      showVersion: boolean;
      maxTranslationTextLength: number;
      recaptchaSiteKey?: string;
      openReplayApiKey?: string;
    };
    SocketIo: {
      enabled: boolean;
      port: number;
      serverUrl?: string;
      allowedTransports: string[];
    };
    DeprecatedKeyDto: {
      /** This means name of key. Will be renamed in v2 */
      fullPathString: string;
    };
    KeyWithTranslationsResponseDto: {
      id?: number;
      name?: string;
      translations: { [key: string]: string };
    };
    PaginationMeta: {
      offset?: number;
      allCount?: number;
    };
    ResponseParams: {
      search?: string;
      languages?: string[];
    };
    ViewDataResponseLinkedHashSetKeyWithTranslationsResponseDtoResponseParams: {
      paginationMeta?: components["schemas"]["PaginationMeta"];
      params?: components["schemas"]["ResponseParams"];
      data?: components["schemas"]["KeyWithTranslationsResponseDto"][];
    };
    InvitationDTO: {
      id?: number;
      code?: string;
      type?: "VIEW" | "TRANSLATE" | "EDIT" | "MANAGE";
    };
  };
}

export interface operations {
  uploadAvatar: {
    responses: {
      /** OK */
      200: {
        content: {
          "*/*": components["schemas"]["UserAccountModel"];
        };
      };
      /** Bad Request */
      400: {
        content: {
          "*/*": string;
        };
      };
      /** Not Found */
      404: {
        content: {
          "*/*": string;
        };
      };
    };
    requestBody: {
      content: {
        "multipart/form-data": {
          avatar: string;
        };
      };
    };
  };
  removeAvatar: {
    responses: {
      /** OK */
      200: {
        content: {
          "*/*": components["schemas"]["UserAccountModel"];
        };
      };
      /** Bad Request */
      400: {
        content: {
          "*/*": string;
        };
      };
      /** Not Found */
      404: {
        content: {
          "*/*": string;
        };
      };
    };
  };
  get: {
    parameters: {
      path: {
        projectId: number;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "*/*": components["schemas"]["ProjectModel"];
        };
      };
      /** Bad Request */
      400: {
        content: {
          "*/*": string;
        };
      };
      /** Not Found */
      404: {
        content: {
          "*/*": string;
        };
      };
    };
  };
  editProject: {
    parameters: {
      path: {
        projectId: number;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "*/*": components["schemas"]["ProjectModel"];
        };
      };
      /** Bad Request */
      400: {
        content: {
          "*/*": string;
        };
      };
      /** Not Found */
      404: {
        content: {
          "*/*": string;
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["EditProjectDTO"];
      };
    };
  };
  deleteProject: {
    parameters: {
      path: {
        projectId: number;
      };
    };
    responses: {
      /** OK */
      200: unknown;
      /** Bad Request */
      400: {
        content: {
          "*/*": string;
        };
      };
      /** Not Found */
      404: {
        content: {
          "*/*": string;
        };
      };
    };
  };
  setUsersPermissions: {
    parameters: {
      path: {
        projectId: number;
        userId: number;
        permissionType: "VIEW" | "TRANSLATE" | "EDIT" | "MANAGE";
      };
      query: {
        languages?: number[];
      };
    };
    responses: {
      /** OK */
      200: unknown;
      /** Bad Request */
      400: {
        content: {
          "*/*": string;
        };
      };
      /** Not Found */
      404: {
        content: {
          "*/*": string;
        };
      };
    };
  };
  revokePermission: {
    parameters: {
      path: {
        projectId: number;
        userId: number;
      };
    };
    responses: {
      /** OK */
      200: unknown;
      /** Bad Request */
      400: {
        content: {
          "*/*": string;
        };
      };
      /** Not Found */
      404: {
        content: {
          "*/*": string;
        };
      };
    };
  };
  getMachineTranslationSettings: {
    parameters: {
      path: {
        projectId: number;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "*/*": components["schemas"]["CollectionModelLanguageConfigItemModel"];
        };
      };
      /** Bad Request */
      400: {
        content: {
          "*/*": string;
        };
      };
      /** Not Found */
      404: {
        content: {
          "*/*": string;
        };
      };
    };
  };
  setMachineTranslationSettings: {
    parameters: {
      path: {
        projectId: number;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "*/*": components["schemas"]["CollectionModelLanguageConfigItemModel"];
        };
      };
      /** Bad Request */
      400: {
        content: {
          "*/*": string;
        };
      };
      /** Not Found */
      404: {
        content: {
          "*/*": string;
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["SetMachineTranslationSettingsDto"];
      };
    };
  };
  tagKey: {
    parameters: {
      path: {
        keyId: number;
        projectId: number;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "*/*": components["schemas"]["TagModel"];
        };
      };
      /** Bad Request */
      400: {
        content: {
          "*/*": string;
        };
      };
      /** Not Found */
      404: {
        content: {
          "*/*": string;
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["TagKeyDto"];
      };
    };
  };
  complexEdit: {
    parameters: {
      path: {
        id: number;
        projectId: number;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "*/*": components["schemas"]["KeyWithDataModel"];
        };
      };
      /** Bad Request */
      400: {
        content: {
          "*/*": string;
        };
      };
      /** Not Found */
      404: {
        content: {
          "*/*": string;
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["ComplexEditKeyDto"];
      };
    };
  };
  edit: {
    parameters: {
      path: {
        id: number;
        projectId: number;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "*/*": components["schemas"]["KeyModel"];
        };
      };
      /** Bad Request */
      400: {
        content: {
          "*/*": string;
        };
      };
      /** Not Found */
      404: {
        content: {
          "*/*": string;
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["EditKeyDto"];
      };
    };
  };
  inviteUser: {
    parameters: {
      path: {
        projectId: number;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "*/*": components["schemas"]["ProjectInvitationModel"];
        };
      };
      /** Bad Request */
      400: {
        content: {
          "*/*": string;
        };
      };
      /** Not Found */
      404: {
        content: {
          "*/*": string;
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["ProjectInviteUserDto"];
      };
    };
  };
  resolveTranslationSetOverride: {
    parameters: {
      path: {
        languageId: number;
        translationId: number;
        projectId: number;
      };
    };
    responses: {
      /** OK */
      200: unknown;
      /** Bad Request */
      400: {
        content: {
          "*/*": string;
        };
      };
      /** Not Found */
      404: {
        content: {
          "*/*": string;
        };
      };
    };
  };
  resolveTranslationSetKeepExisting: {
    parameters: {
      path: {
        languageId: number;
        translationId: number;
        projectId: number;
      };
    };
    responses: {
      /** OK */
      200: unknown;
      /** Bad Request */
      400: {
        content: {
          "*/*": string;
        };
      };
      /** Not Found */
      404: {
        content: {
          "*/*": string;
        };
      };
    };
  };
  resolveTranslationSetOverride_1: {
    parameters: {
      path: {
        languageId: number;
        projectId: number;
      };
    };
    responses: {
      /** OK */
      200: unknown;
      /** Bad Request */
      400: {
        content: {
          "*/*": string;
        };
      };
      /** Not Found */
      404: {
        content: {
          "*/*": string;
        };
      };
    };
  };
  resolveTranslationSetKeepExisting_1: {
    parameters: {
      path: {
        languageId: number;
        projectId: number;
      };
    };
    responses: {
      /** OK */
      200: unknown;
      /** Bad Request */
      400: {
        content: {
          "*/*": string;
        };
      };
      /** Not Found */
      404: {
        content: {
          "*/*": string;
        };
      };
    };
  };
  selectExistingLanguage: {
    parameters: {
      path: {
        importLanguageId: number;
        existingLanguageId: number;
        projectId: number;
      };
    };
    responses: {
      /** OK */
      200: unknown;
      /** Bad Request */
      400: {
        content: {
          "*/*": string;
        };
      };
      /** Not Found */
      404: {
        content: {
          "*/*": string;
        };
      };
    };
  };
  resetExistingLanguage: {
    parameters: {
      path: {
        importLanguageId: number;
        projectId: number;
      };
    };
    responses: {
      /** OK */
      200: unknown;
      /** Bad Request */
      400: {
        content: {
          "*/*": string;
        };
      };
      /** Not Found */
      404: {
        content: {
          "*/*": string;
        };
      };
    };
  };
  applyImport: {
    parameters: {
      path: {
        projectId: number;
      };
      query: {
        forceMode?: "OVERRIDE" | "KEEP" | "NO_FORCE";
      };
    };
    responses: {
      /** OK */
      200: unknown;
      /** Bad Request */
      400: {
        content: {
          "*/*": string;
        };
      };
      /** Not Found */
      404: {
        content: {
          "*/*": string;
        };
      };
    };
  };
  getAutoTranslationSettings: {
    parameters: {
      path: {
        projectId: number;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "*/*": components["schemas"]["AutoTranslationSettingsDto"];
        };
      };
      /** Bad Request */
      400: {
        content: {
          "*/*": string;
        };
      };
      /** Not Found */
      404: {
        content: {
          "*/*": string;
        };
      };
    };
  };
  setAutoTranslationSettings: {
    parameters: {
      path: {
        projectId: number;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "*/*": components["schemas"]["AutoTranslationSettingsDto"];
        };
      };
      /** Bad Request */
      400: {
        content: {
          "*/*": string;
        };
      };
      /** Not Found */
      404: {
        content: {
          "*/*": string;
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["AutoTranslationSettingsDto"];
      };
    };
  };
  setTranslationState: {
    parameters: {
      path: {
        translationId: number;
        state: "UNTRANSLATED" | "TRANSLATED" | "REVIEWED";
        projectId: number;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "*/*": components["schemas"]["TranslationModel"];
        };
      };
      /** Bad Request */
      400: {
        content: {
          "*/*": string;
        };
      };
      /** Not Found */
      404: {
        content: {
          "*/*": string;
        };
      };
    };
  };
  setState: {
    parameters: {
      path: {
        commentId: number;
        state: "RESOLUTION_NOT_NEEDED" | "NEEDS_RESOLUTION" | "RESOLVED";
        projectId: number;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "*/*": components["schemas"]["TranslationCommentModel"];
        };
      };
      /** Bad Request */
      400: {
        content: {
          "*/*": string;
        };
      };
      /** Not Found */
      404: {
        content: {
          "*/*": string;
        };
      };
    };
  };
  get_1: {
    parameters: {
      path: {
        translationId: number;
        commentId: number;
        projectId: number;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "*/*": components["schemas"]["TranslationCommentModel"];
        };
      };
      /** Bad Request */
      400: {
        content: {
          "*/*": string;
        };
      };
      /** Not Found */
      404: {
        content: {
          "*/*": string;
        };
      };
    };
  };
  update: {
    parameters: {
      path: {
        commentId: number;
        projectId: number;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "*/*": components["schemas"]["TranslationCommentModel"];
        };
      };
      /** Bad Request */
      400: {
        content: {
          "*/*": string;
        };
      };
      /** Not Found */
      404: {
        content: {
          "*/*": string;
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["TranslationCommentDto"];
      };
    };
  };
  delete_2: {
    parameters: {
      path: {
        commentId: number;
        projectId: number;
      };
    };
    responses: {
      /** OK */
      200: unknown;
      /** Bad Request */
      400: {
        content: {
          "*/*": string;
        };
      };
      /** Not Found */
      404: {
        content: {
          "*/*": string;
        };
      };
    };
  };
  dismissAutoTranslatedState: {
    parameters: {
      path: {
        translationId: number;
        projectId: number;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "*/*": components["schemas"]["TranslationModel"];
        };
      };
      /** Bad Request */
      400: {
        content: {
          "*/*": string;
        };
      };
      /** Not Found */
      404: {
        content: {
          "*/*": string;
        };
      };
    };
  };
  getTranslations: {
    parameters: {
      query: {
        /** Cursor to get next data */
        cursor?: string;
        /**
         * Translation state in the format: languageTag,state. You can use this parameter multiple times.
         *
         * When used with multiple states for same language it is applied with logical OR.
         *
         * When used with multiple languages, it is applied with logical AND.
         */
        filterState?: string[];
        /**
         * Languages to be contained in response.
         *
         * To add multiple languages, repeat this param (eg. ?languages=en&languages=de)
         */
        languages?: string[];
        /** String to search in key name or translation text */
        search?: string;
        /** Selects only one key with provided name */
        filterKeyName?: string;
        /** Selects only one key with provided id */
        filterKeyId?: number[];
        /** Selects only keys, where translation is missing in any language */
        filterUntranslatedAny?: boolean;
        /** Selects only keys, where translation is provided in any language */
        filterTranslatedAny?: boolean;
        /** Selects only keys, where translation is missing in specified language */
        filterUntranslatedInLang?: string;
        /** Selects only keys, where translation is provided in specified language */
        filterTranslatedInLang?: string;
        /** Selects only keys with screenshots */
        filterHasScreenshot?: boolean;
        /** Selects only keys without screenshots */
        filterHasNoScreenshot?: boolean;
        /** Selects only keys with provided tag */
        filterTag?: string[];
        /** Zero-based page index (0..N) */
        page?: number;
        /** The size of the page to be returned */
        size?: number;
        /** Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported. */
        sort?: string[];
      };
      path: {
        projectId: number;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "*/*": components["schemas"]["KeysWithTranslationsPageModel"];
        };
      };
      /** Bad Request */
      400: {
        content: {
          "*/*": string;
        };
      };
      /** Not Found */
      404: {
        content: {
          "*/*": string;
        };
      };
    };
  };
  setTranslations: {
    parameters: {
      path: {
        projectId: number;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "*/*": components["schemas"]["SetTranslationsResponseModel"];
        };
      };
      /** Bad Request */
      400: {
        content: {
          "*/*": string;
        };
      };
      /** Not Found */
      404: {
        content: {
          "*/*": string;
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["SetTranslationsWithKeyDto"];
      };
    };
  };
  createOrUpdateTranslations: {
    parameters: {
      path: {
        projectId: number;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "*/*": components["schemas"]["SetTranslationsResponseModel"];
        };
      };
      /** Bad Request */
      400: {
        content: {
          "*/*": string;
        };
      };
      /** Not Found */
      404: {
        content: {
          "*/*": string;
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["SetTranslationsWithKeyDto"];
      };
    };
  };
  transferProjectToUser: {
    parameters: {
      path: {
        projectId: number;
        userId: number;
      };
    };
    responses: {
      /** OK */
      200: unknown;
      /** Bad Request */
      400: {
        content: {
          "*/*": string;
        };
      };
      /** Not Found */
      404: {
        content: {
          "*/*": string;
        };
      };
    };
  };
  transferProjectToOrganization: {
    parameters: {
      path: {
        projectId: number;
        organizationId: number;
      };
    };
    responses: {
      /** OK */
      200: unknown;
      /** Bad Request */
      400: {
        content: {
          "*/*": string;
        };
      };
      /** Not Found */
      404: {
        content: {
          "*/*": string;
        };
      };
    };
  };
  leaveProject: {
    parameters: {
      path: {
        projectId: number;
      };
    };
    responses: {
      /** OK */
      200: unknown;
      /** Bad Request */
      400: {
        content: {
          "*/*": string;
        };
      };
      /** Not Found */
      404: {
        content: {
          "*/*": string;
        };
      };
    };
  };
  get_3: {
    parameters: {
      path: {
        languageId: number;
        projectId: number;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "*/*": components["schemas"]["LanguageModel"];
        };
      };
      /** Bad Request */
      400: {
        content: {
          "*/*": string;
        };
      };
      /** Not Found */
      404: {
        content: {
          "*/*": string;
        };
      };
    };
  };
  editLanguage: {
    parameters: {
      path: {
        languageId: number;
        projectId: number;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "*/*": components["schemas"]["LanguageModel"];
        };
      };
      /** Bad Request */
      400: {
        content: {
          "*/*": string;
        };
      };
      /** Not Found */
      404: {
        content: {
          "*/*": string;
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["LanguageDto"];
      };
    };
  };
  deleteLanguage_1: {
    parameters: {
      path: {
        languageId: number;
        projectId: number;
      };
    };
    responses: {
      /** OK */
      200: unknown;
      /** Bad Request */
      400: {
        content: {
          "*/*": string;
        };
      };
      /** Not Found */
      404: {
        content: {
          "*/*": string;
        };
      };
    };
  };
  uploadAvatar_1: {
    parameters: {
      path: {
        id: number;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "*/*": components["schemas"]["ProjectModel"];
        };
      };
      /** Bad Request */
      400: {
        content: {
          "*/*": string;
        };
      };
      /** Not Found */
      404: {
        content: {
          "*/*": string;
        };
      };
    };
    requestBody: {
      content: {
        "multipart/form-data": {
          avatar: string;
        };
      };
    };
  };
  removeAvatar_1: {
    parameters: {
      path: {
        id: number;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "*/*": components["schemas"]["ProjectModel"];
        };
      };
      /** Bad Request */
      400: {
        content: {
          "*/*": string;
        };
      };
      /** Not Found */
      404: {
        content: {
          "*/*": string;
        };
      };
    };
  };
  setUserRole: {
    parameters: {
      path: {
        organizationId: number;
        userId: number;
      };
    };
    responses: {
      /** OK */
      200: unknown;
      /** Bad Request */
      400: {
        content: {
          "*/*": string;
        };
      };
      /** Not Found */
      404: {
        content: {
          "*/*": string;
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["SetOrganizationRoleDto"];
      };
    };
  };
  setUserRole_1: {
    parameters: {
      path: {
        organizationId: number;
        userId: number;
      };
    };
    responses: {
      /** OK */
      200: unknown;
      /** Bad Request */
      400: {
        content: {
          "*/*": string;
        };
      };
      /** Not Found */
      404: {
        content: {
          "*/*": string;
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["SetOrganizationRoleDto"];
      };
    };
  };
  leaveOrganization: {
    parameters: {
      path: {
        id: number;
      };
    };
    responses: {
      /** OK */
      200: unknown;
      /** Bad Request */
      400: {
        content: {
          "*/*": string;
        };
      };
      /** Not Found */
      404: {
        content: {
          "*/*": string;
        };
      };
    };
  };
  leaveOrganization_1: {
    parameters: {
      path: {
        id: number;
      };
    };
    responses: {
      /** OK */
      200: unknown;
      /** Bad Request */
      400: {
        content: {
          "*/*": string;
        };
      };
      /** Not Found */
      404: {
        content: {
          "*/*": string;
        };
      };
    };
  };
  inviteUser_1: {
    parameters: {
      path: {
        id: number;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "*/*": components["schemas"]["OrganizationInvitationModel"];
        };
      };
      /** Bad Request */
      400: {
        content: {
          "*/*": string;
        };
      };
      /** Not Found */
      404: {
        content: {
          "*/*": string;
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["OrganizationInviteUserDto"];
      };
    };
  };
  inviteUser_2: {
    parameters: {
      path: {
        id: number;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "*/*": components["schemas"]["OrganizationInvitationModel"];
        };
      };
      /** Bad Request */
      400: {
        content: {
          "*/*": string;
        };
      };
      /** Not Found */
      404: {
        content: {
          "*/*": string;
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["OrganizationInviteUserDto"];
      };
    };
  };
  uploadAvatar_2: {
    parameters: {
      path: {
        id: number;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "*/*": components["schemas"]["OrganizationModel"];
        };
      };
      /** Bad Request */
      400: {
        content: {
          "*/*": string;
        };
      };
      /** Not Found */
      404: {
        content: {
          "*/*": string;
        };
      };
    };
    requestBody: {
      content: {
        "multipart/form-data": {
          avatar: string;
        };
      };
    };
  };
  removeAvatar_2: {
    parameters: {
      path: {
        id: number;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "*/*": components["schemas"]["OrganizationModel"];
        };
      };
      /** Bad Request */
      400: {
        content: {
          "*/*": string;
        };
      };
      /** Not Found */
      404: {
        content: {
          "*/*": string;
        };
      };
    };
  };
  uploadAvatar_3: {
    parameters: {
      path: {
        id: number;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "*/*": components["schemas"]["OrganizationModel"];
        };
      };
      /** Bad Request */
      400: {
        content: {
          "*/*": string;
        };
      };
      /** Not Found */
      404: {
        content: {
          "*/*": string;
        };
      };
    };
    requestBody: {
      content: {
        "multipart/form-data": {
          avatar: string;
        };
      };
    };
  };
  removeAvatar_3: {
    parameters: {
      path: {
        id: number;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "*/*": components["schemas"]["OrganizationModel"];
        };
      };
      /** Bad Request */
      400: {
        content: {
          "*/*": string;
        };
      };
      /** Not Found */
      404: {
        content: {
          "*/*": string;
        };
      };
    };
  };
  get_7: {
    parameters: {
      path: {
        id: number;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "*/*": components["schemas"]["OrganizationModel"];
        };
      };
      /** Bad Request */
      400: {
        content: {
          "*/*": string;
        };
      };
      /** Not Found */
      404: {
        content: {
          "*/*": string;
        };
      };
    };
  };
  update_2: {
    parameters: {
      path: {
        id: number;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "*/*": components["schemas"]["OrganizationModel"];
        };
      };
      /** Bad Request */
      400: {
        content: {
          "*/*": string;
        };
      };
      /** Not Found */
      404: {
        content: {
          "*/*": string;
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["OrganizationDto"];
      };
    };
  };
  delete_4: {
    parameters: {
      path: {
        id: number;
      };
    };
    responses: {
      /** OK */
      200: unknown;
      /** Bad Request */
      400: {
        content: {
          "*/*": string;
        };
      };
      /** Not Found */
      404: {
        content: {
          "*/*": string;
        };
      };
    };
  };
  get_8: {
    parameters: {
      path: {
        id: number;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "*/*": components["schemas"]["OrganizationModel"];
        };
      };
      /** Bad Request */
      400: {
        content: {
          "*/*": string;
        };
      };
      /** Not Found */
      404: {
        content: {
          "*/*": string;
        };
      };
    };
  };
  update_3: {
    parameters: {
      path: {
        id: number;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "*/*": components["schemas"]["OrganizationModel"];
        };
      };
      /** Bad Request */
      400: {
        content: {
          "*/*": string;
        };
      };
      /** Not Found */
      404: {
        content: {
          "*/*": string;
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["OrganizationDto"];
      };
    };
  };
  delete_5: {
    parameters: {
      path: {
        id: number;
      };
    };
    responses: {
      /** OK */
      200: unknown;
      /** Bad Request */
      400: {
        content: {
          "*/*": string;
        };
      };
      /** Not Found */
      404: {
        content: {
          "*/*": string;
        };
      };
    };
  };
  /** Refreshes organizations subscription by Stripe data */
  refresh: {
    parameters: {
      path: {
        organizationId: number;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "*/*": components["schemas"]["ActivePlanModel"];
        };
      };
      /** Bad Request */
      400: {
        content: {
          "*/*": string;
        };
      };
      /** Not Found */
      404: {
        content: {
          "*/*": string;
        };
      };
    };
  };
  update_4: {
    parameters: {
      path: {
        apiKeyId: number;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "*/*": components["schemas"]["ApiKeyModel"];
        };
      };
      /** Bad Request */
      400: {
        content: {
          "*/*": string;
        };
      };
      /** Not Found */
      404: {
        content: {
          "*/*": string;
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["V2EditApiKeyDto"];
      };
    };
  };
  delete_7: {
    parameters: {
      path: {
        apiKeyId: number;
      };
    };
    responses: {
      /** OK */
      200: unknown;
      /** Bad Request */
      400: {
        content: {
          "*/*": string;
        };
      };
      /** Not Found */
      404: {
        content: {
          "*/*": string;
        };
      };
    };
  };
  edit_2: {
    parameters: {
      path: {
        projectId: number;
      };
    };
    responses: {
      /** OK */
      200: unknown;
      /** Bad Request */
      400: {
        content: {
          "*/*": string;
        };
      };
      /** Not Found */
      404: {
        content: {
          "*/*": string;
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["OldEditKeyDto"];
      };
    };
  };
  create_12: {
    parameters: {
      path: {
        projectId: number;
      };
    };
    responses: {
      /** OK */
      200: unknown;
      /** Bad Request */
      400: {
        content: {
          "*/*": string;
        };
      };
      /** Not Found */
      404: {
        content: {
          "*/*": string;
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["SetTranslationsWithKeyDto"];
      };
    };
  };
  delete_10: {
    parameters: {
      path: {
        projectId: number;
      };
    };
    responses: {
      /** OK */
      200: unknown;
      /** Bad Request */
      400: {
        content: {
          "*/*": string;
        };
      };
      /** Not Found */
      404: {
        content: {
          "*/*": string;
        };
      };
    };
    requestBody: {
      content: {
        "application/json": number[];
      };
    };
  };
  setTranslations_2: {
    parameters: {
      path: {
        projectId: number;
      };
    };
    responses: {
      /** OK */
      200: unknown;
      /** Bad Request */
      400: {
        content: {
          "*/*": string;
        };
      };
      /** Not Found */
      404: {
        content: {
          "*/*": string;
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["SetTranslationsWithKeyDto"];
      };
    };
  };
  createOrUpdateTranslations_2: {
    parameters: {
      path: {
        projectId: number;
      };
    };
    responses: {
      /** OK */
      200: unknown;
      /** Bad Request */
      400: {
        content: {
          "*/*": string;
        };
      };
      /** Not Found */
      404: {
        content: {
          "*/*": string;
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["SetTranslationsWithKeyDto"];
      };
    };
  };
  getInfo: {
    responses: {
      /** OK */
      200: {
        content: {
          "*/*": components["schemas"]["UserAccountModel"];
        };
      };
      /** Bad Request */
      400: {
        content: {
          "*/*": string;
        };
      };
      /** Not Found */
      404: {
        content: {
          "*/*": string;
        };
      };
    };
  };
  updateUser: {
    responses: {
      /** OK */
      200: {
        content: {
          "*/*": components["schemas"]["UserAccountModel"];
        };
      };
      /** Bad Request */
      400: {
        content: {
          "*/*": string;
        };
      };
      /** Not Found */
      404: {
        content: {
          "*/*": string;
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["UserUpdateRequestDto"];
      };
    };
  };
  generateProjectSlug: {
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": string;
        };
      };
      /** Bad Request */
      400: {
        content: {
          "*/*": string;
        };
      };
      /** Not Found */
      404: {
        content: {
          "*/*": string;
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["GenerateSlugDto"];
      };
    };
  };
  generateProjectSlug_1: {
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": string;
        };
      };
      /** Bad Request */
      400: {
        content: {
          "*/*": string;
        };
      };
      /** Not Found */
      404: {
        content: {
          "*/*": string;
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["GenerateSlugDto"];
      };
    };
  };
  generateOrganizationSlug: {
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": string;
        };
      };
      /** Bad Request */
      400: {
        content: {
          "*/*": string;
        };
      };
      /** Not Found */
      404: {
        content: {
          "*/*": string;
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["GenerateSlugDto"];
      };
    };
  };
  generateOrganizationSlug_1: {
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": string;
        };
      };
      /** Bad Request */
      400: {
        content: {
          "*/*": string;
        };
      };
      /** Not Found */
      404: {
        content: {
          "*/*": string;
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["GenerateSlugDto"];
      };
    };
  };
  webhook: {
    parameters: {
      header: {
        "Stripe-Signature": string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "*/*": string;
        };
      };
      /** Bad Request */
      400: {
        content: {
          "*/*": string;
        };
      };
      /** Not Found */
      404: {
        content: {
          "*/*": string;
        };
      };
    };
    requestBody: {
      content: {
        "application/json": string;
      };
    };
  };
  getAll: {
    parameters: {
      query: {
        /** Zero-based page index (0..N) */
        page?: number;
        /** The size of the page to be returned */
        size?: number;
        /** Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported. */
        sort?: string[];
        search?: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/hal+json": components["schemas"]["PagedModelProjectModel"];
        };
      };
      /** Bad Request */
      400: {
        content: {
          "*/*": string;
        };
      };
      /** Not Found */
      404: {
        content: {
          "*/*": string;
        };
      };
    };
  };
  createProject: {
    responses: {
      /** OK */
      200: {
        content: {
          "*/*": components["schemas"]["ProjectModel"];
        };
      };
      /** Bad Request */
      400: {
        content: {
          "*/*": string;
        };
      };
      /** Not Found */
      404: {
        content: {
          "*/*": string;
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["CreateProjectDTO"];
      };
    };
  };
  create: {
    parameters: {
      path: {
        projectId: number;
      };
    };
    responses: {
      /** Created */
      201: {
        content: {
          "*/*": components["schemas"]["KeyWithDataModel"];
        };
      };
      /** Bad Request */
      400: {
        content: {
          "*/*": string;
        };
      };
      /** Not Found */
      404: {
        content: {
          "*/*": string;
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["CreateKeyDto"];
      };
    };
  };
  create_1: {
    parameters: {
      path: {
        projectId: number;
      };
    };
    responses: {
      /** Created */
      201: {
        content: {
          "*/*": components["schemas"]["KeyWithDataModel"];
        };
      };
      /** Bad Request */
      400: {
        content: {
          "*/*": string;
        };
      };
      /** Not Found */
      404: {
        content: {
          "*/*": string;
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["CreateKeyDto"];
      };
    };
  };
  addFiles: {
    parameters: {
      path: {
        projectId: number;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "*/*": components["schemas"]["ImportAddFilesResultModel"];
        };
      };
      /** Bad Request */
      400: {
        content: {
          "*/*": string;
        };
      };
      /** Not Found */
      404: {
        content: {
          "*/*": string;
        };
      };
    };
    requestBody: {
      content: {
        "multipart/form-data": {
          files: string[];
        };
      };
    };
  };
  cancelImport: {
    parameters: {
      path: {
        projectId: number;
      };
    };
    responses: {
      /** OK */
      200: unknown;
      /** Bad Request */
      400: {
        content: {
          "*/*": string;
        };
      };
      /** Not Found */
      404: {
        content: {
          "*/*": string;
        };
      };
    };
  };
  addFilesStreaming: {
    parameters: {
      path: {
        projectId: number;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "*/*": components["schemas"]["StreamingResponseBody"];
        };
      };
      /** Bad Request */
      400: {
        content: {
          "*/*": string;
        };
      };
      /** Not Found */
      404: {
        content: {
          "*/*": string;
        };
      };
    };
    requestBody: {
      content: {
        "multipart/form-data": {
          files: string[];
        };
      };
    };
  };
  getAll_3: {
    parameters: {
      path: {
        translationId: number;
        projectId: number;
      };
      query: {
        /** Zero-based page index (0..N) */
        page?: number;
        /** The size of the page to be returned */
        size?: number;
        /** Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported. */
        sort?: string[];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "*/*": components["schemas"]["PagedModelTranslationCommentModel"];
        };
      };
      /** Bad Request */
      400: {
        content: {
          "*/*": string;
        };
      };
      /** Not Found */
      404: {
        content: {
          "*/*": string;
        };
      };
    };
  };
  create_4: {
    parameters: {
      path: {
        translationId: number;
        projectId: number;
      };
    };
    responses: {
      /** Created */
      201: {
        content: {
          "*/*": components["schemas"]["TranslationCommentModel"];
        };
      };
      /** Bad Request */
      400: {
        content: {
          "*/*": string;
        };
      };
      /** Not Found */
      404: {
        content: {
          "*/*": string;
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["TranslationCommentDto"];
      };
    };
  };
  create_6: {
    parameters: {
      path: {
        projectId: number;
      };
    };
    responses: {
      /** Created */
      201: {
        content: {
          "*/*": components["schemas"]["TranslationWithCommentModel"];
        };
      };
      /** Bad Request */
      400: {
        content: {
          "*/*": string;
        };
      };
      /** Not Found */
      404: {
        content: {
          "*/*": string;
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["TranslationCommentWithLangKeyDto"];
      };
    };
  };
  suggestTranslationMemory: {
    parameters: {
      query: {
        /** Zero-based page index (0..N) */
        page?: number;
        /** The size of the page to be returned */
        size?: number;
        /** Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported. */
        sort?: string[];
      };
      path: {
        projectId: number;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "*/*": components["schemas"]["PagedModelTranslationMemoryItemModel"];
        };
      };
      /** Bad Request */
      400: {
        content: {
          "*/*": string;
        };
      };
      /** Not Found */
      404: {
        content: {
          "*/*": string;
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["SuggestRequestDto"];
      };
    };
  };
  suggestMachineTranslations: {
    parameters: {
      path: {
        projectId: number;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "*/*": components["schemas"]["SuggestResultModel"];
        };
      };
      /** Bad Request */
      400: {
        content: {
          "*/*": string;
        };
      };
      /** Not Found */
      404: {
        content: {
          "*/*": string;
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["SuggestRequestDto"];
      };
    };
  };
  getAll_5: {
    parameters: {
      path: {
        projectId: number;
      };
      query: {
        /** Zero-based page index (0..N) */
        page?: number;
        /** The size of the page to be returned */
        size?: number;
        /** Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported. */
        sort?: string[];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "*/*": components["schemas"]["PagedModelLanguageModel"];
        };
      };
      /** Bad Request */
      400: {
        content: {
          "*/*": string;
        };
      };
      /** Not Found */
      404: {
        content: {
          "*/*": string;
        };
      };
    };
  };
  createLanguage: {
    parameters: {
      path: {
        projectId: number;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "*/*": components["schemas"]["LanguageModel"];
        };
      };
      /** Bad Request */
      400: {
        content: {
          "*/*": string;
        };
      };
      /** Not Found */
      404: {
        content: {
          "*/*": string;
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["LanguageDto"];
      };
    };
  };
  export: {
    parameters: {
      path: {
        projectId: number;
      };
      query: {
        /**
         * Languages to be contained in export.
         *
         * If null, all languages are exported
         */
        languages?: string[];
        /** Format to export to */
        format?: "JSON" | "XLIFF";
        /** When true translations are split to directories by scopes */
        splitByScope?: boolean;
        /**
         * Scope delimiter.
         *
         * e.g. For key "home.header.title" scopes would result in "home" -> "header", when splitByScopeDepth is greater than 1.
         */
        splitByScopeDelimiter?: string;
        /**
         * Maximum depth of scoping.
         *
         * e.g. For key "home.header.title" and depth 1, resulting scope is  "home".
         *
         * For depth 2, resulting scopes are  "home" -> "header".
         */
        splitByScopeDepth?: number;
        /** Filter key IDs to be contained in export */
        filterKeyId?: number[];
        /** Filter key IDs not to be contained in export */
        filterKeyIdNot?: number[];
        /** Filter keys tagged by */
        filterTag?: string;
        /** Filter keys with prefix */
        filterKeyPrefix?: string;
        /** Filter translations with state. By default, everything except untranslated is exported. */
        filterState?: ("UNTRANSLATED" | "TRANSLATED" | "REVIEWED")[];
        /**
         * If false, it doesn't return zip of files, but it returns single file.
         *
         * This is possible only when single language is exported. Otherwise it returns "400 - Bad Request" response.
         */
        zip?: boolean;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "*/*": components["schemas"]["StreamingResponseBody"];
        };
      };
      /** Bad Request */
      400: {
        content: {
          "*/*": string;
        };
      };
      /** Not Found */
      404: {
        content: {
          "*/*": string;
        };
      };
    };
  };
  exportPost: {
    parameters: {
      path: {
        projectId: number;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "*/*": components["schemas"]["StreamingResponseBody"];
        };
      };
      /** Bad Request */
      400: {
        content: {
          "*/*": string;
        };
      };
      /** Not Found */
      404: {
        content: {
          "*/*": string;
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["ExportParams"];
      };
    };
  };
  getKeyScreenshots_3: {
    parameters: {
      path: {
        keyId: number;
        projectId: number;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "*/*": components["schemas"]["CollectionModelScreenshotModel"];
        };
      };
      /** Bad Request */
      400: {
        content: {
          "*/*": string;
        };
      };
      /** Not Found */
      404: {
        content: {
          "*/*": string;
        };
      };
    };
  };
  uploadScreenshot_1: {
    parameters: {
      path: {
        keyId: number;
        projectId: number;
      };
    };
    responses: {
      /** Created */
      201: {
        content: {
          "*/*": components["schemas"]["ScreenshotModel"];
        };
      };
      /** Bad Request */
      400: {
        content: {
          "*/*": string;
        };
      };
      /** Not Found */
      404: {
        content: {
          "*/*": string;
        };
      };
    };
    requestBody: {
      content: {
        "multipart/form-data": {
          screenshot: string;
        };
      };
    };
  };
  getAll_7: {
    parameters: {
      query: {
        /** Zero-based page index (0..N) */
        page?: number;
        /** The size of the page to be returned */
        size?: number;
        /** Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported. */
        sort?: string[];
        params: components["schemas"]["OrganizationRequestParamsDto"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/hal+json": components["schemas"]["PagedModelOrganizationModel"];
        };
      };
      /** Bad Request */
      400: {
        content: {
          "*/*": string;
        };
      };
      /** Not Found */
      404: {
        content: {
          "*/*": string;
        };
      };
    };
  };
  create_8: {
    responses: {
      /** OK */
      200: {
        content: {
          "*/*": components["schemas"]["OrganizationModel"];
        };
      };
      /** Bad Request */
      400: {
        content: {
          "*/*": string;
        };
      };
      /** Not Found */
      404: {
        content: {
          "*/*": string;
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["OrganizationDto"];
      };
    };
  };
  getAll_8: {
    parameters: {
      query: {
        /** Zero-based page index (0..N) */
        page?: number;
        /** The size of the page to be returned */
        size?: number;
        /** Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported. */
        sort?: string[];
        params: components["schemas"]["OrganizationRequestParamsDto"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/hal+json": components["schemas"]["PagedModelOrganizationModel"];
        };
      };
      /** Bad Request */
      400: {
        content: {
          "*/*": string;
        };
      };
      /** Not Found */
      404: {
        content: {
          "*/*": string;
        };
      };
    };
  };
  create_9: {
    responses: {
      /** OK */
      200: {
        content: {
          "*/*": components["schemas"]["OrganizationModel"];
        };
      };
      /** Bad Request */
      400: {
        content: {
          "*/*": string;
        };
      };
      /** Not Found */
      404: {
        content: {
          "*/*": string;
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["OrganizationDto"];
      };
    };
  };
  upload: {
    parameters: {};
    responses: {
      /** Created */
      201: {
        content: {
          "*/*": components["schemas"]["UploadedImageModel"];
        };
      };
      /** Bad Request */
      400: {
        content: {
          "*/*": string;
        };
      };
      /** Not Found */
      404: {
        content: {
          "*/*": string;
        };
      };
    };
    requestBody: {
      content: {
        "multipart/form-data": {
          image: string;
        };
      };
    };
  };
  /** Updates subscription session */
  updateSubscription: {
    responses: {
      /** OK */
      200: unknown;
      /** Bad Request */
      400: {
        content: {
          "*/*": string;
        };
      };
      /** Not Found */
      404: {
        content: {
          "*/*": string;
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["UpdateSubscriptionRequest"];
      };
    };
  };
  /** Returns url of Stripe checkout session */
  subscribe: {
    responses: {
      /** OK */
      200: {
        content: {
          "*/*": string;
        };
      };
      /** Bad Request */
      400: {
        content: {
          "*/*": string;
        };
      };
      /** Not Found */
      404: {
        content: {
          "*/*": string;
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["SubscribeRequest"];
      };
    };
  };
  /** Returns url of Stripe checkout session */
  createCustomerPortalSession: {
    responses: {
      /** OK */
      200: {
        content: {
          "*/*": string;
        };
      };
      /** Bad Request */
      400: {
        content: {
          "*/*": string;
        };
      };
      /** Not Found */
      404: {
        content: {
          "*/*": string;
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["CreateCustomerPortalSessionRequest"];
      };
    };
  };
  /** Cancels subscription */
  cancelSubscription: {
    parameters: {
      path: {
        organizationId: number;
      };
    };
    responses: {
      /** OK */
      200: unknown;
      /** Bad Request */
      400: {
        content: {
          "*/*": string;
        };
      };
      /** Not Found */
      404: {
        content: {
          "*/*": string;
        };
      };
    };
  };
  allByUser: {
    parameters: {
      query: {
        pageable: components["schemas"]["Pageable"];
        filterProjectId?: number;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "*/*": components["schemas"]["PagedModelApiKeyModel"];
        };
      };
      /** Bad Request */
      400: {
        content: {
          "*/*": string;
        };
      };
      /** Not Found */
      404: {
        content: {
          "*/*": string;
        };
      };
    };
  };
  create_10: {
    responses: {
      /** OK */
      200: {
        content: {
          "*/*": components["schemas"]["ApiKeyModel"];
        };
      };
      /** Bad Request */
      400: {
        content: {
          "*/*": string;
        };
      };
      /** Not Found */
      404: {
        content: {
          "*/*": string;
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["CreateApiKeyDto"];
      };
    };
  };
  getInfo_1: {
    responses: {
      /** OK */
      200: {
        content: {
          "*/*": components["schemas"]["UserResponseDTO"];
        };
      };
      /** Bad Request */
      400: {
        content: {
          "*/*": string;
        };
      };
      /** Not Found */
      404: {
        content: {
          "*/*": string;
        };
      };
    };
  };
  updateUser_1: {
    responses: {
      /** OK */
      200: unknown;
      /** Bad Request */
      400: {
        content: {
          "*/*": string;
        };
      };
      /** Not Found */
      404: {
        content: {
          "*/*": string;
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["UserUpdateRequestDto"];
      };
    };
  };
  validateEmail: {
    responses: {
      /** OK */
      200: {
        content: {
          "*/*": boolean;
        };
      };
      /** Bad Request */
      400: {
        content: {
          "*/*": string;
        };
      };
      /** Not Found */
      404: {
        content: {
          "*/*": string;
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["TextNode"];
      };
    };
  };
  signUp: {
    responses: {
      /** OK */
      200: {
        content: {
          "*/*": components["schemas"]["JwtAuthenticationResponse"];
        };
      };
      /** Bad Request */
      400: {
        content: {
          "*/*": string;
        };
      };
      /** Not Found */
      404: {
        content: {
          "*/*": string;
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["SignUpDto"];
      };
    };
  };
  resetPasswordSet: {
    responses: {
      /** OK */
      200: unknown;
      /** Bad Request */
      400: {
        content: {
          "*/*": string;
        };
      };
      /** Not Found */
      404: {
        content: {
          "*/*": string;
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["ResetPassword"];
      };
    };
  };
  resetPasswordRequest: {
    responses: {
      /** OK */
      200: unknown;
      /** Bad Request */
      400: {
        content: {
          "*/*": string;
        };
      };
      /** Not Found */
      404: {
        content: {
          "*/*": string;
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["ResetPasswordRequest"];
      };
    };
  };
  authenticateUser: {
    responses: {
      /** OK */
      200: {
        content: {
          "*/*": { [key: string]: unknown };
        };
      };
      /** Bad Request */
      400: {
        content: {
          "*/*": string;
        };
      };
      /** Not Found */
      404: {
        content: {
          "*/*": string;
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["LoginRequest"];
      };
    };
  };
  /** Key name must be provided in method body, since it can be long and can contain characters hard to encode */
  getKeyTranslationsPost: {
    parameters: {
      path: {
        languages: string[];
        projectId: number;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "*/*": { [key: string]: string };
        };
      };
      /** Bad Request */
      400: {
        content: {
          "*/*": string;
        };
      };
      /** Not Found */
      404: {
        content: {
          "*/*": string;
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["GetKeyTranslationsReqDto"];
      };
    };
  };
  editDeprecated: {
    parameters: {
      path: {
        projectId: number;
      };
    };
    responses: {
      /** OK */
      200: unknown;
      /** Bad Request */
      400: {
        content: {
          "*/*": string;
        };
      };
      /** Not Found */
      404: {
        content: {
          "*/*": string;
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["DeprecatedEditKeyDTO"];
      };
    };
  };
  create_11: {
    parameters: {
      path: {
        projectId: number;
      };
    };
    responses: {
      /** OK */
      200: unknown;
      /** Bad Request */
      400: {
        content: {
          "*/*": string;
        };
      };
      /** Not Found */
      404: {
        content: {
          "*/*": string;
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["SetTranslationsWithKeyDto"];
      };
    };
  };
  getKeyScreenshots_1: {
    parameters: {
      path: {
        projectId: number;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "*/*": components["schemas"]["ScreenshotDTO"][];
        };
      };
      /** Bad Request */
      400: {
        content: {
          "*/*": string;
        };
      };
      /** Not Found */
      404: {
        content: {
          "*/*": string;
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["GetScreenshotsByKeyDto"];
      };
    };
  };
  uploadScreenshot_3: {
    parameters: {
      path: {
        projectId: number;
      };
      query: {
        key: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "*/*": components["schemas"]["ScreenshotDTO"];
        };
      };
      /** Bad Request */
      400: {
        content: {
          "*/*": string;
        };
      };
      /** Not Found */
      404: {
        content: {
          "*/*": string;
        };
      };
    };
    requestBody: {
      content: {
        "multipart/form-data": {
          screenshot: string;
        };
      };
    };
  };
  allByUser_1: {
    responses: {
      /** OK */
      200: {
        content: {
          "*/*": components["schemas"]["ApiKeyDTO"][];
        };
      };
      /** Bad Request */
      400: {
        content: {
          "*/*": string;
        };
      };
      /** Not Found */
      404: {
        content: {
          "*/*": string;
        };
      };
    };
  };
  create_15: {
    responses: {
      /** OK */
      200: {
        content: {
          "*/*": components["schemas"]["ApiKeyDTO"];
        };
      };
      /** Bad Request */
      400: {
        content: {
          "*/*": string;
        };
      };
      /** Not Found */
      404: {
        content: {
          "*/*": string;
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["CreateApiKeyDto"];
      };
    };
  };
  edit_4: {
    responses: {
      /** OK */
      200: unknown;
      /** Bad Request */
      400: {
        content: {
          "*/*": string;
        };
      };
      /** Not Found */
      404: {
        content: {
          "*/*": string;
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["EditApiKeyDTO"];
      };
    };
  };
  validateProjectSlug: {
    parameters: {
      path: {
        slug: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "*/*": boolean;
        };
      };
      /** Bad Request */
      400: {
        content: {
          "*/*": string;
        };
      };
      /** Not Found */
      404: {
        content: {
          "*/*": string;
        };
      };
    };
  };
  validateProjectSlug_1: {
    parameters: {
      path: {
        slug: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "*/*": boolean;
        };
      };
      /** Bad Request */
      400: {
        content: {
          "*/*": string;
        };
      };
      /** Not Found */
      404: {
        content: {
          "*/*": string;
        };
      };
    };
  };
  validateOrganizationSlug: {
    parameters: {
      path: {
        slug: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "*/*": boolean;
        };
      };
      /** Bad Request */
      400: {
        content: {
          "*/*": string;
        };
      };
      /** Not Found */
      404: {
        content: {
          "*/*": string;
        };
      };
    };
  };
  validateOrganizationSlug_1: {
    parameters: {
      path: {
        slug: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "*/*": boolean;
        };
      };
      /** Bad Request */
      400: {
        content: {
          "*/*": string;
        };
      };
      /** Not Found */
      404: {
        content: {
          "*/*": string;
        };
      };
    };
  };
  getAllUsers: {
    parameters: {
      path: {
        projectId: number;
      };
      query: {
        /** Zero-based page index (0..N) */
        page?: number;
        /** The size of the page to be returned */
        size?: number;
        /** Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported. */
        sort?: string[];
        search?: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "*/*": components["schemas"]["PagedModelUserAccountInProjectModel"];
        };
      };
      /** Bad Request */
      400: {
        content: {
          "*/*": string;
        };
      };
      /** Not Found */
      404: {
        content: {
          "*/*": string;
        };
      };
    };
  };
  getAll_1: {
    parameters: {
      query: {
        search?: string;
        /** Zero-based page index (0..N) */
        page?: number;
        /** The size of the page to be returned */
        size?: number;
        /** Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported. */
        sort?: string[];
      };
      path: {
        projectId: number;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "*/*": components["schemas"]["PagedModelTagModel"];
        };
      };
      /** Bad Request */
      400: {
        content: {
          "*/*": string;
        };
      };
      /** Not Found */
      404: {
        content: {
          "*/*": string;
        };
      };
    };
  };
  getProjectCredits: {
    parameters: {
      path: {
        projectId: number;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "*/*": components["schemas"]["CreditBalanceModel"];
        };
      };
      /** Bad Request */
      400: {
        content: {
          "*/*": string;
        };
      };
      /** Not Found */
      404: {
        content: {
          "*/*": string;
        };
      };
    };
  };
  getImportResult: {
    parameters: {
      path: {
        projectId: number;
      };
      query: {
        /** Zero-based page index (0..N) */
        page?: number;
        /** The size of the page to be returned */
        size?: number;
        /** Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported. */
        sort?: string[];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "*/*": components["schemas"]["PagedModelImportLanguageModel"];
        };
      };
      /** Bad Request */
      400: {
        content: {
          "*/*": string;
        };
      };
      /** Not Found */
      404: {
        content: {
          "*/*": string;
        };
      };
    };
  };
  getImportLanguage: {
    parameters: {
      path: {
        languageId: number;
        projectId: number;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "*/*": components["schemas"]["ImportLanguageModel"];
        };
      };
      /** Bad Request */
      400: {
        content: {
          "*/*": string;
        };
      };
      /** Not Found */
      404: {
        content: {
          "*/*": string;
        };
      };
    };
  };
  deleteLanguage: {
    parameters: {
      path: {
        languageId: number;
        projectId: number;
      };
    };
    responses: {
      /** OK */
      200: unknown;
      /** Bad Request */
      400: {
        content: {
          "*/*": string;
        };
      };
      /** Not Found */
      404: {
        content: {
          "*/*": string;
        };
      };
    };
  };
  getImportTranslations: {
    parameters: {
      path: {
        projectId: number;
        languageId: number;
      };
      query: {
        onlyConflicts?: boolean;
        onlyUnresolved?: boolean;
        search?: string;
        /** Zero-based page index (0..N) */
        page?: number;
        /** The size of the page to be returned */
        size?: number;
        /** Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported. */
        sort?: string[];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "*/*": components["schemas"]["PagedModelImportTranslationModel"];
        };
      };
      /** Bad Request */
      400: {
        content: {
          "*/*": string;
        };
      };
      /** Not Found */
      404: {
        content: {
          "*/*": string;
        };
      };
    };
  };
  getImportFileIssues: {
    parameters: {
      path: {
        importFileId: number;
        projectId: number;
      };
      query: {
        /** Zero-based page index (0..N) */
        page?: number;
        /** The size of the page to be returned */
        size?: number;
        /** Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported. */
        sort?: string[];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "*/*": components["schemas"]["PagedModelEntityModelImportFileIssueView"];
        };
      };
      /** Bad Request */
      400: {
        content: {
          "*/*": string;
        };
      };
      /** Not Found */
      404: {
        content: {
          "*/*": string;
        };
      };
    };
  };
  getTranslationHistory: {
    parameters: {
      path: {
        translationId: number;
        projectId: number;
      };
      query: {
        /** Zero-based page index (0..N) */
        page?: number;
        /** The size of the page to be returned */
        size?: number;
        /** Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported. */
        sort?: string[];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "*/*": components["schemas"]["PagedModelTranslationHistoryModel"];
        };
      };
      /** Bad Request */
      400: {
        content: {
          "*/*": string;
        };
      };
      /** Not Found */
      404: {
        content: {
          "*/*": string;
        };
      };
    };
  };
  getAllTranslations: {
    parameters: {
      path: {
        languages: string[];
        projectId: number;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "*/*": string;
        };
      };
      /** Bad Request */
      400: {
        content: {
          "*/*": string;
        };
      };
      /** Not Found */
      404: {
        content: {
          "*/*": string;
        };
      };
    };
  };
  getSelectAllKeyIds: {
    parameters: {
      query: {
        /**
         * Translation state in the format: languageTag,state. You can use this parameter multiple times.
         *
         * When used with multiple states for same language it is applied with logical OR.
         *
         * When used with multiple languages, it is applied with logical AND.
         */
        filterState?: string[];
        /**
         * Languages to be contained in response.
         *
         * To add multiple languages, repeat this param (eg. ?languages=en&languages=de)
         */
        languages?: string[];
        /** String to search in key name or translation text */
        search?: string;
        /** Selects only one key with provided name */
        filterKeyName?: string;
        /** Selects only one key with provided id */
        filterKeyId?: number[];
        /** Selects only keys, where translation is missing in any language */
        filterUntranslatedAny?: boolean;
        /** Selects only keys, where translation is provided in any language */
        filterTranslatedAny?: boolean;
        /** Selects only keys, where translation is missing in specified language */
        filterUntranslatedInLang?: string;
        /** Selects only keys, where translation is provided in specified language */
        filterTranslatedInLang?: string;
        /** Selects only keys with screenshots */
        filterHasScreenshot?: boolean;
        /** Selects only keys without screenshots */
        filterHasNoScreenshot?: boolean;
        /** Selects only keys with provided tag */
        filterTag?: string[];
      };
      path: {
        projectId: number;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "*/*": components["schemas"]["SelectAllResponse"];
        };
      };
      /** Bad Request */
      400: {
        content: {
          "*/*": string;
        };
      };
      /** Not Found */
      404: {
        content: {
          "*/*": string;
        };
      };
    };
  };
  getTransferOptions: {
    parameters: {
      query: {
        search?: string;
      };
      path: {
        projectId: number;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "*/*": components["schemas"]["CollectionModelProjectTransferOptionModel"];
        };
      };
      /** Bad Request */
      400: {
        content: {
          "*/*": string;
        };
      };
      /** Not Found */
      404: {
        content: {
          "*/*": string;
        };
      };
    };
  };
  getProjectInvitations: {
    parameters: {
      path: {
        projectId: number;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "*/*": components["schemas"]["CollectionModelProjectInvitationModel"];
        };
      };
      /** Bad Request */
      400: {
        content: {
          "*/*": string;
        };
      };
      /** Not Found */
      404: {
        content: {
          "*/*": string;
        };
      };
    };
  };
  allByProject: {
    parameters: {
      query: {
        pageable: components["schemas"]["Pageable"];
      };
      path: {
        projectId: number;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "*/*": components["schemas"]["PagedModelApiKeyModel"];
        };
      };
      /** Bad Request */
      400: {
        content: {
          "*/*": string;
        };
      };
      /** Not Found */
      404: {
        content: {
          "*/*": string;
        };
      };
    };
  };
  getAllWithStatistics: {
    parameters: {
      query: {
        /** Zero-based page index (0..N) */
        page?: number;
        /** The size of the page to be returned */
        size?: number;
        /** Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported. */
        sort?: string[];
        search?: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/hal+json": components["schemas"]["PagedModelProjectWithStatsModel"];
        };
      };
      /** Bad Request */
      400: {
        content: {
          "*/*": string;
        };
      };
      /** Not Found */
      404: {
        content: {
          "*/*": string;
        };
      };
    };
  };
  getAllProjects: {
    parameters: {
      path: {
        slug: string;
      };
      query: {
        /** Zero-based page index (0..N) */
        page?: number;
        /** The size of the page to be returned */
        size?: number;
        /** Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported. */
        sort?: string[];
        search?: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "*/*": components["schemas"]["PagedModelProjectModel"];
        };
      };
      /** Bad Request */
      400: {
        content: {
          "*/*": string;
        };
      };
      /** Not Found */
      404: {
        content: {
          "*/*": string;
        };
      };
    };
  };
  getAllProjects_1: {
    parameters: {
      path: {
        slug: string;
      };
      query: {
        /** Zero-based page index (0..N) */
        page?: number;
        /** The size of the page to be returned */
        size?: number;
        /** Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported. */
        sort?: string[];
        search?: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "*/*": components["schemas"]["PagedModelProjectModel"];
        };
      };
      /** Bad Request */
      400: {
        content: {
          "*/*": string;
        };
      };
      /** Not Found */
      404: {
        content: {
          "*/*": string;
        };
      };
    };
  };
  get_5: {
    parameters: {
      path: {
        slug: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "*/*": components["schemas"]["OrganizationModel"];
        };
      };
      /** Bad Request */
      400: {
        content: {
          "*/*": string;
        };
      };
      /** Not Found */
      404: {
        content: {
          "*/*": string;
        };
      };
    };
  };
  get_6: {
    parameters: {
      path: {
        slug: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "*/*": components["schemas"]["OrganizationModel"];
        };
      };
      /** Bad Request */
      400: {
        content: {
          "*/*": string;
        };
      };
      /** Not Found */
      404: {
        content: {
          "*/*": string;
        };
      };
    };
  };
  getOrganizationCredits: {
    parameters: {
      path: {
        organizationId: number;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "*/*": components["schemas"]["CreditBalanceModel"];
        };
      };
      /** Bad Request */
      400: {
        content: {
          "*/*": string;
        };
      };
      /** Not Found */
      404: {
        content: {
          "*/*": string;
        };
      };
    };
  };
  getInvitations: {
    parameters: {
      path: {
        organizationId: number;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "*/*": components["schemas"]["CollectionModelOrganizationInvitationModel"];
        };
      };
      /** Bad Request */
      400: {
        content: {
          "*/*": string;
        };
      };
      /** Not Found */
      404: {
        content: {
          "*/*": string;
        };
      };
    };
  };
  getInvitations_1: {
    parameters: {
      path: {
        organizationId: number;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "*/*": components["schemas"]["CollectionModelOrganizationInvitationModel"];
        };
      };
      /** Bad Request */
      400: {
        content: {
          "*/*": string;
        };
      };
      /** Not Found */
      404: {
        content: {
          "*/*": string;
        };
      };
    };
  };
  getAllUsers_1: {
    parameters: {
      path: {
        id: number;
      };
      query: {
        /** Zero-based page index (0..N) */
        page?: number;
        /** The size of the page to be returned */
        size?: number;
        /** Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported. */
        sort?: string[];
        search?: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "*/*": components["schemas"]["PagedModelUserAccountWithOrganizationRoleModel"];
        };
      };
      /** Bad Request */
      400: {
        content: {
          "*/*": string;
        };
      };
      /** Not Found */
      404: {
        content: {
          "*/*": string;
        };
      };
    };
  };
  getAllUsers_2: {
    parameters: {
      path: {
        id: number;
      };
      query: {
        /** Zero-based page index (0..N) */
        page?: number;
        /** The size of the page to be returned */
        size?: number;
        /** Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported. */
        sort?: string[];
        search?: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "*/*": components["schemas"]["PagedModelUserAccountWithOrganizationRoleModel"];
        };
      };
      /** Bad Request */
      400: {
        content: {
          "*/*": string;
        };
      };
      /** Not Found */
      404: {
        content: {
          "*/*": string;
        };
      };
    };
  };
  getAllProjects_2: {
    parameters: {
      path: {
        id: number;
      };
      query: {
        /** Zero-based page index (0..N) */
        page?: number;
        /** The size of the page to be returned */
        size?: number;
        /** Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported. */
        sort?: string[];
        search?: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "*/*": components["schemas"]["PagedModelProjectModel"];
        };
      };
      /** Bad Request */
      400: {
        content: {
          "*/*": string;
        };
      };
      /** Not Found */
      404: {
        content: {
          "*/*": string;
        };
      };
    };
  };
  getAllProjects_3: {
    parameters: {
      path: {
        id: number;
      };
      query: {
        /** Zero-based page index (0..N) */
        page?: number;
        /** The size of the page to be returned */
        size?: number;
        /** Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported. */
        sort?: string[];
        search?: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "*/*": components["schemas"]["PagedModelProjectModel"];
        };
      };
      /** Bad Request */
      400: {
        content: {
          "*/*": string;
        };
      };
      /** Not Found */
      404: {
        content: {
          "*/*": string;
        };
      };
    };
  };
  getUserCredits: {
    responses: {
      /** OK */
      200: {
        content: {
          "*/*": components["schemas"]["CreditBalanceModel"];
        };
      };
      /** Bad Request */
      400: {
        content: {
          "*/*": string;
        };
      };
      /** Not Found */
      404: {
        content: {
          "*/*": string;
        };
      };
    };
  };
  acceptInvitation: {
    parameters: {
      path: {
        code: string;
      };
    };
    responses: {
      /** OK */
      200: unknown;
      /** Bad Request */
      400: {
        content: {
          "*/*": string;
        };
      };
      /** Not Found */
      404: {
        content: {
          "*/*": string;
        };
      };
    };
  };
  getSubscriptions: {
    responses: {
      /** OK */
      200: unknown;
      /** Bad Request */
      400: {
        content: {
          "*/*": string;
        };
      };
      /** Not Found */
      404: {
        content: {
          "*/*": string;
        };
      };
    };
  };
  getPlans: {
    responses: {
      /** OK */
      200: {
        content: {
          "*/*": components["schemas"]["CollectionModelPlanModel"];
        };
      };
      /** Bad Request */
      400: {
        content: {
          "*/*": string;
        };
      };
      /** Not Found */
      404: {
        content: {
          "*/*": string;
        };
      };
    };
  };
  /** Creates change payment method session */
  createChangePaymentMethodSession: {
    parameters: {
      path: {
        organizationId: number;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "*/*": string;
        };
      };
      /** Bad Request */
      400: {
        content: {
          "*/*": string;
        };
      };
      /** Not Found */
      404: {
        content: {
          "*/*": string;
        };
      };
    };
  };
  /** Refreshes organizations subscription by Stripe data */
  getActivePlan: {
    parameters: {
      path: {
        organizationId: number;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "*/*": components["schemas"]["ActivePlanModel"];
        };
      };
      /** Bad Request */
      400: {
        content: {
          "*/*": string;
        };
      };
      /** Not Found */
      404: {
        content: {
          "*/*": string;
        };
      };
    };
  };
  get_9: {
    parameters: {
      path: {
        keyId: number;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "*/*": components["schemas"]["ApiKeyModel"];
        };
      };
      /** Bad Request */
      400: {
        content: {
          "*/*": string;
        };
      };
      /** Not Found */
      404: {
        content: {
          "*/*": string;
        };
      };
    };
  };
  getCurrent: {
    parameters: {};
    responses: {
      /** OK */
      200: {
        content: {
          "*/*": components["schemas"]["ApiKeyWithLanguagesModel"];
        };
      };
      /** Bad Request */
      400: {
        content: {
          "*/*": string;
        };
      };
      /** Not Found */
      404: {
        content: {
          "*/*": string;
        };
      };
    };
  };
  getScopes: {
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": string;
        };
      };
      /** Bad Request */
      400: {
        content: {
          "*/*": string;
        };
      };
      /** Not Found */
      404: {
        content: {
          "*/*": string;
        };
      };
    };
  };
  verifyEmail: {
    parameters: {
      path: {
        userId: number;
        code: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "*/*": components["schemas"]["JwtAuthenticationResponse"];
        };
      };
      /** Bad Request */
      400: {
        content: {
          "*/*": string;
        };
      };
      /** Not Found */
      404: {
        content: {
          "*/*": string;
        };
      };
    };
  };
  resetPasswordValidate: {
    parameters: {
      path: {
        code: string;
        email: string;
      };
    };
    responses: {
      /** OK */
      200: unknown;
      /** Bad Request */
      400: {
        content: {
          "*/*": string;
        };
      };
      /** Not Found */
      404: {
        content: {
          "*/*": string;
        };
      };
    };
  };
  getPublicConfiguration: {
    responses: {
      /** OK */
      200: {
        content: {
          "*/*": components["schemas"]["PublicConfigurationDTO"];
        };
      };
      /** Bad Request */
      400: {
        content: {
          "*/*": string;
        };
      };
      /** Not Found */
      404: {
        content: {
          "*/*": string;
        };
      };
    };
  };
  authenticateUser_1: {
    parameters: {
      path: {
        serviceType: string;
        code: string;
      };
      query: {
        invitationCode?: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "*/*": components["schemas"]["JwtAuthenticationResponse"];
        };
      };
      /** Bad Request */
      400: {
        content: {
          "*/*": string;
        };
      };
      /** Not Found */
      404: {
        content: {
          "*/*": string;
        };
      };
    };
  };
  getDeprecated: {
    parameters: {
      path: {
        id: number;
        projectId: number;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "*/*": components["schemas"]["DeprecatedKeyDto"];
        };
      };
      /** Bad Request */
      400: {
        content: {
          "*/*": string;
        };
      };
      /** Not Found */
      404: {
        content: {
          "*/*": string;
        };
      };
    };
  };
  delete_8: {
    parameters: {
      path: {
        id: number;
        projectId: number;
      };
    };
    responses: {
      /** OK */
      200: unknown;
      /** Bad Request */
      400: {
        content: {
          "*/*": string;
        };
      };
      /** Not Found */
      404: {
        content: {
          "*/*": string;
        };
      };
    };
  };
  doExportJsonZip: {
    parameters: {
      path: {
        projectId: number;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/zip": components["schemas"]["StreamingResponseBody"];
        };
      };
      /** Bad Request */
      400: {
        content: {
          "*/*": string;
        };
      };
      /** Not Found */
      404: {
        content: {
          "*/*": string;
        };
      };
    };
  };
  doExportJsonZip_2: {
    parameters: {
      path: {
        projectId: number;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/zip": components["schemas"]["StreamingResponseBody"];
        };
      };
      /** Bad Request */
      400: {
        content: {
          "*/*": string;
        };
      };
      /** Not Found */
      404: {
        content: {
          "*/*": string;
        };
      };
    };
  };
  getTranslations_2: {
    parameters: {
      path: {
        languages: string[];
        projectId: number;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "*/*": { [key: string]: { [key: string]: unknown } };
        };
      };
      /** Bad Request */
      400: {
        content: {
          "*/*": string;
        };
      };
      /** Not Found */
      404: {
        content: {
          "*/*": string;
        };
      };
    };
  };
  getViewData: {
    parameters: {
      path: {
        projectId: number;
      };
      query: {
        languages?: string[];
        limit?: number;
        offset?: number;
        search?: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "*/*": components["schemas"]["ViewDataResponseLinkedHashSetKeyWithTranslationsResponseDtoResponseParams"];
        };
      };
      /** Bad Request */
      400: {
        content: {
          "*/*": string;
        };
      };
      /** Not Found */
      404: {
        content: {
          "*/*": string;
        };
      };
    };
  };
  getProjectInvitations_1: {
    parameters: {
      path: {
        projectId: number;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "*/*": components["schemas"]["InvitationDTO"][];
        };
      };
      /** Bad Request */
      400: {
        content: {
          "*/*": string;
        };
      };
      /** Not Found */
      404: {
        content: {
          "*/*": string;
        };
      };
    };
  };
  acceptInvitation_1: {
    parameters: {
      path: {
        code: string;
      };
    };
    responses: {
      /** OK */
      200: unknown;
      /** Bad Request */
      400: {
        content: {
          "*/*": string;
        };
      };
      /** Not Found */
      404: {
        content: {
          "*/*": string;
        };
      };
    };
  };
  getApiKeyScopes: {
    parameters: {};
    responses: {
      /** OK */
      200: {
        content: {
          "*/*": string[];
        };
      };
      /** Bad Request */
      400: {
        content: {
          "*/*": string;
        };
      };
      /** Not Found */
      404: {
        content: {
          "*/*": string;
        };
      };
    };
  };
  allByProject_1: {
    parameters: {
      path: {
        projectId: number;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "*/*": components["schemas"]["ApiKeyDTO"][];
        };
      };
      /** Bad Request */
      400: {
        content: {
          "*/*": string;
        };
      };
      /** Not Found */
      404: {
        content: {
          "*/*": string;
        };
      };
    };
  };
  getScopes_1: {
    responses: {
      /** OK */
      200: {
        content: {
          "*/*": { [key: string]: string[] };
        };
      };
      /** Bad Request */
      400: {
        content: {
          "*/*": string;
        };
      };
      /** Not Found */
      404: {
        content: {
          "*/*": string;
        };
      };
    };
  };
  removeTag: {
    parameters: {
      path: {
        keyId: number;
        tagId: number;
        projectId: number;
      };
    };
    responses: {
      /** OK */
      200: unknown;
      /** Bad Request */
      400: {
        content: {
          "*/*": string;
        };
      };
      /** Not Found */
      404: {
        content: {
          "*/*": string;
        };
      };
    };
  };
  delete: {
    parameters: {
      path: {
        ids: number[];
        projectId: number;
      };
    };
    responses: {
      /** OK */
      200: unknown;
      /** Bad Request */
      400: {
        content: {
          "*/*": string;
        };
      };
      /** Not Found */
      404: {
        content: {
          "*/*": string;
        };
      };
    };
  };
  deleteScreenshots_1: {
    parameters: {
      path: {
        ids: number[];
        projectId: number;
      };
    };
    responses: {
      /** OK */
      200: unknown;
      /** Bad Request */
      400: {
        content: {
          "*/*": string;
        };
      };
      /** Not Found */
      404: {
        content: {
          "*/*": string;
        };
      };
    };
  };
  removeUser: {
    parameters: {
      path: {
        organizationId: number;
        userId: number;
      };
    };
    responses: {
      /** OK */
      200: unknown;
      /** Bad Request */
      400: {
        content: {
          "*/*": string;
        };
      };
      /** Not Found */
      404: {
        content: {
          "*/*": string;
        };
      };
    };
  };
  removeUser_1: {
    parameters: {
      path: {
        organizationId: number;
        userId: number;
      };
    };
    responses: {
      /** OK */
      200: unknown;
      /** Bad Request */
      400: {
        content: {
          "*/*": string;
        };
      };
      /** Not Found */
      404: {
        content: {
          "*/*": string;
        };
      };
    };
  };
  deleteInvitation: {
    parameters: {
      path: {
        invitationId: number;
      };
    };
    responses: {
      /** OK */
      200: unknown;
      /** Bad Request */
      400: {
        content: {
          "*/*": string;
        };
      };
      /** Not Found */
      404: {
        content: {
          "*/*": string;
        };
      };
    };
  };
  delete_6: {
    parameters: {
      path: {
        ids: number[];
      };
    };
    responses: {
      /** OK */
      200: unknown;
      /** Bad Request */
      400: {
        content: {
          "*/*": string;
        };
      };
      /** Not Found */
      404: {
        content: {
          "*/*": string;
        };
      };
    };
  };
  deleteScreenshots_3: {
    parameters: {
      path: {
        ids: number[];
        projectId: number;
      };
    };
    responses: {
      /** OK */
      200: unknown;
      /** Bad Request */
      400: {
        content: {
          "*/*": string;
        };
      };
      /** Not Found */
      404: {
        content: {
          "*/*": string;
        };
      };
    };
  };
  deleteInvitation_1: {
    parameters: {
      path: {
        invitationId: number;
      };
    };
    responses: {
      /** OK */
      200: unknown;
      /** Bad Request */
      400: {
        content: {
          "*/*": string;
        };
      };
      /** Not Found */
      404: {
        content: {
          "*/*": string;
        };
      };
    };
  };
  delete_12: {
    parameters: {
      path: {
        key: string;
      };
    };
    responses: {
      /** OK */
      200: unknown;
      /** Bad Request */
      400: {
        content: {
          "*/*": string;
        };
      };
      /** Not Found */
      404: {
        content: {
          "*/*": string;
        };
      };
    };
  };
}

export interface external {}
